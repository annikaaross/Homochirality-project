{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "check-in-copy.ipynb",
      "provenance": [],
      "collapsed_sections": [
        "AvOcPptw5JVf",
        "a8egVnJUbTYf",
        "axVuXR__qoi4",
        "jI9isLxnRk5d",
        "RX_K0yxjTSEx",
        "IdB8k_yadghA",
        "1lx9FPNLeRNM",
        "HVY41XQPUjIT",
        "hqD3AL_kUldF",
        "HEFlHyn6UoPU",
        "cz4Cis4ze7j6",
        "ALnPeaUCfhL4",
        "CmKsCAazVPy_",
        "DdqK65C-8cpi",
        "3nujicdthc10"
      ],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/annikaaross/Homochirality-project/blob/lio/old_plots.ipynd\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IO4sCUUbimaZ",
        "colab_type": "text"
      },
      "source": [
        "# Homochirality Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AhJ4LH11izgn",
        "colab_type": "text"
      },
      "source": [
        "I have changed this Hello and welcome to *Do Opposites Attract?*, the first monomer dating show. We're here to see if similarity between member(s) of a relationship matters in the strength of the bond between the individuals. Read on as we introduce you to our monomers, our polymers, and the stylish bag that they reside in. Along the way we will keep you up to date on all the drama of falling in love and breaking hearts. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AvOcPptw5JVf",
        "colab_type": "text"
      },
      "source": [
        "## Global Parameters"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lfMJif2R5Uc7",
        "colab_type": "text"
      },
      "source": [
        "Here's where we keep the rules by which our contestants must play."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zW---ckX5eKf",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "#the bond break probbility applied to all bonds\n",
        "BASE_BOND_BREAK_PROBABILITY = 0.9\n",
        "#if a bond itself is homochiral the base bond fator is multiplied by\n",
        "#this factor\n",
        "HOMOCHIRAL_BREAK_FACTOR = 0.9\n",
        "#this factor is incorporated for each additional neighboring homochiral bond\n",
        "# becomes less and less influential as the bond gets further away\n",
        "HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR = 0.3\n",
        "#decreases the break probability based on the length of the polymer\n",
        "LENGTH_FACTOR = 0.6\n",
        "\n",
        "\n",
        "\n",
        "#limits the influence of length on breakprobabiltiy(the larger the less influence it has)\n",
        "N=40\n",
        "\n",
        "#saves the break probabilities of sequences of polymers\n",
        "break_prob_lookup_table = {}\n",
        "\n",
        "poisson_dict={}\n",
        "\n",
        "#used in Poisson distribution\n",
        "LAMBDA=6\n",
        "#################################################################\n",
        "#these are the same factors as before but with on for left and  #\n",
        "#one for right homochiral bonds.                                #\n",
        "#used in biaseastbondbreakability method which can be choosen to#\n",
        "#be used over the regular eastbondbreakability method in the    #\n",
        "#self.reset_break_probability() method                          #\n",
        "#################################################################\n",
        "HOMOCHIRAL_BREAK_FACTOR_LEFT = 0.0\n",
        "HOMOCHIRAL_BREAK_FACTOR_RIGHT = 0.9\n",
        "HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_LEFT = 0.3\n",
        "HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_RIGHT = 0.3\n",
        "\n",
        "N_RANDS = 1000\n",
        "\n",
        "\n",
        "rands = []\n",
        "\n",
        "\n",
        "#These are the liklihoods that a monomer will choose to poof or bond, respectively.\n",
        "#Used in the Reactables class.\n",
        "POOF_CHANCE = 0.3333\n",
        "BOND_PROB = 0.3333\n",
        "\n",
        "# Shorthands #\n",
        "L = True\n",
        "R = False"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a8egVnJUbTYf",
        "colab_type": "text"
      },
      "source": [
        "## Imports and Helpers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IN4PxtbgaqnM",
        "colab_type": "text"
      },
      "source": [
        "First we install a package called ```jdc``` which allows us to define classes across different cells using the syntax\n",
        "\n",
        "```\n",
        "%%add_to our_class\n",
        "def our_function(self, our_variable):\n",
        "  print our_variable\n",
        "```\n",
        "\n",
        "The documentation on this magic function can be found at https://alexhagen.github.io/jdc/\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5f4ViqWCQDL_",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "5d1ab947-8a93-4bb2-cc37-3ba9f2d7e4cc"
      },
      "source": [
        "!pip install jdc"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Collecting jdc\n",
            "  Downloading https://files.pythonhosted.org/packages/5a/cb/9afea749985eef20f3160e8826a531c7502e40c35a038dfe49b67726e9a0/jdc-0.0.9-py2.py3-none-any.whl\n",
            "Installing collected packages: jdc\n",
            "Successfully installed jdc-0.0.9\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5DONDBNfbdC3",
        "colab_type": "text"
      },
      "source": [
        "Here are the imports."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7gkyGmzI6Vst",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "import random\n",
        "import numpy as np\n",
        "import copy\n",
        "from google.colab import widgets\n",
        "import matplotlib.pyplot as plt\n",
        "import jdc\n",
        "import more_itertools\n",
        "import pandas as pd\n",
        "import plotly.express as px"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gc5E3314bsom",
        "colab_type": "text"
      },
      "source": [
        "And here are some helper functions."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "PckJQLzVbvor",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "def make_pool(n):\n",
        "  \"\"\"\n",
        "  Return a list of n new monomers.\n",
        "  \"\"\"\n",
        "  monomers = []\n",
        "  for n in range(n):\n",
        "    monomers.append(Monomer())\n",
        "  return monomers\n",
        "\n",
        "\n",
        "def numpy_fillna(data):\n",
        "  \"\"\" Rectangularize a jagged array.\n",
        "\n",
        "  Source: https://stackoverflow.com/a/32043366\n",
        "  \"\"\"\n",
        "  # Get lengths of each row of data\n",
        "  lens = np.array([len(i) for i in data])\n",
        "\n",
        "  # Mask of valid places in each row\n",
        "  mask = np.arange(lens.max()) < lens[:,None]\n",
        "\n",
        "  # Setup output array and put elements from data into masked positions\n",
        "  out = np.zeros(mask.shape, dtype=float)\n",
        "  out[mask] = np.concatenate(data)\n",
        "  return out\n",
        "\n",
        "def eAnd(*args): # From https://stackoverflow.com/q/2770434\n",
        "  return [all(tuple) for tuple in zip(*args)]\n",
        "\n",
        "def get_rand():\n",
        "  \"\"\"A function to provide uniform random numbers\"\"\"\n",
        "  if len(rands)<= 10:\n",
        "    randsarray = np.random.rand(N_RANDS)\n",
        "    rands.extend(randsarray.tolist())\n",
        "  return rands.pop()\n",
        "\n",
        "def poissonequation(k):\n",
        "  #checks if value has already been calulated\n",
        "  if k not in poisson_dict:\n",
        "    #otherwise calculates the values\n",
        "    p = np.exp(-LAMBDA)*((LAMBDA**k)/(np.math.factorial(k)))\n",
        "    #adds to dictionary\n",
        "    poisson_dict[k] = p\n",
        "  return poisson_dict[k]\n"
      ],
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "axVuXR__qoi4",
        "colab_type": "text"
      },
      "source": [
        "## The Monomer class"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ECDSIjWMVTb9",
        "colab_type": "text"
      },
      "source": [
        "These are our Monomers. The individuals in our dating show. They are the best thing a girl can be in this worl, beautiful little fools. They know that they exist and they know what kind of monomer they are, left or right(thats handedness not political party alignment) What more can you ask for?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jI9isLxnRk5d",
        "colab_type": "text"
      },
      "source": [
        "### Constructor"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7TlZA8Njjd2D",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class Monomer:\n",
        "\n",
        "  def __init__(self, **kwargs):\n",
        "    \"\"\"\n",
        "    The constructor method for Monomer objects. Assigns default handedness.\n",
        "    Accepts argument hand = bool with keyword.\n",
        "    Considering other syntax for passing in handedness.\n",
        "    keeps track of how old the monomer\n",
        "    \"\"\"\n",
        "    import random\n",
        "    self._handedness = kwargs['hand'] if 'hand' in kwargs else random.choice([True,False])\n",
        "    self._eastbrkprob = kwargs['brkprob'] if 'brkprob' in kwargs else -1\n",
        "    #keeps track of its age, the number of iterations it has survived\n",
        "    self._age = 0\n",
        "  \n",
        "  def __repr__(self):\n",
        "    return str(f\"{self.get_handedness()}-monomer\")\n"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aP-4RlM7Q9IS",
        "colab_type": "text"
      },
      "source": [
        "### Getters and Setters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IJM6sYAdRHFc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Monomer\n",
        "\n",
        "def get_handedness(self):\n",
        "  \"\"\"Getter method for Monomer handedness.\"\"\"\n",
        "  return self._handedness\n",
        "\n",
        "def get_age(self):\n",
        "  \"\"\"Getter method for Monomer age\"\"\"\n",
        "  return self._age\n",
        "\n",
        "\n",
        "def get_eastbrkprob(self):\n",
        "  \"\"\"Getter method for east bond brk probability\"\"\"\n",
        "  return self._eastbrkprob\n",
        "\n",
        "def set_eastbrkprob(self, newbrk):\n",
        "  \"\"\"Setter method for east bond brk probability\"\"\"\n",
        "  self._eastbrkprob = newbrk\n",
        "\n",
        "def set_age(self, newage):\n",
        "  \"\"\"setter method for age\"\"\"\n",
        "  self._age = newage\n",
        "\n",
        "def reset_eastbrkprob(self) :\n",
        "  \"\"\"reset east brk probability to -1 \n",
        "      to be called when single monomer is broken from polymer\"\"\"\n",
        "  self.set_eastbrkprob(-1)\n"
      ],
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ihXAcN9GRXPL",
        "colab_type": "text"
      },
      "source": [
        "### Polymer Compatibility"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4fFeZGU6Ra7W",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Monomer\n",
        "\n",
        "def get_chirality(self):\n",
        "  \"\"\" Return an expression of handedness compatible with the Polymer notation\n",
        "  of chirality (n_lefts, n_rights).\n",
        "  \"\"\"\n",
        "  if self.get_handedness():\n",
        "    return (1,0)\n",
        "  else:\n",
        "    return (0,1)\n",
        "\n",
        "def get_length(self):\n",
        "  \"\"\" Return 1. \"\"\"\n",
        "  return 1\n",
        "\n",
        "def get_ee(self):\n",
        "  \"\"\" Return the enantiomeric excess of the monomer. This value is always 1. \"\"\"\n",
        "  return 1\n",
        "\n",
        "def get_signed_ee(self):\n",
        "  \"\"\" Return the signed enantiomeric excess of the monomer.\n",
        "  Returns 1 if left handed, -1 if right handed.\n",
        "  \"\"\"\n",
        "  if self.get_handedness():\n",
        "    return 1\n",
        "  else:\n",
        "    return -1\n",
        "\n",
        "def generate_old_log(self):\n",
        "  \"\"\" Return a log tuple in the format\n",
        "  (length, signed ee, total # homochiral bonds)\n",
        "  \"\"\"\n",
        "  return (self.get_length(), \n",
        "          self.get_signed_ee())\n",
        "          #sum(self.get_leftrighthomochiralbonds()))\n",
        "\n",
        "def generate_log(self):\n",
        "  \"\"\" Return a log compatible with the reactables history. \"\"\"\n",
        "  return (self.get_handedness(),)\n",
        "\n",
        "def birthday(self):\n",
        "  \"\"\"ages the monomer up\"\"\"\n",
        "  self._age += 1"
      ],
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lisjFJ2YqZf7",
        "colab_type": "text"
      },
      "source": [
        "## The Polymer class"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E9EWk1VVV-Oc",
        "colab_type": "text"
      },
      "source": [
        "This is our Polymer class, aka the relationships in this dating show. They contain a list of all the monomers that are inside of them. It is kept in a specific order. They are pretty open books. They can tell us how many monomers they contain, they add new members(either monomers or whole other polymers), they can remove entire groups of members after a certain index, they can check which of their bonds are homochiral and use this to calculate probability of a certain bond breaking(the weak areas in their relationship). They can use this to then tell the producers if and where they are planning on breaking off members of they ranks. Like all good relationships, they use purely mathematics and chance to determine these heart breaking decisions. They can also tell us how many left handed monomers and how many right handed monomers they contain. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RX_K0yxjTSEx",
        "colab_type": "text"
      },
      "source": [
        "### Constructor"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zNkhoo72TYUM",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class Polymer:\n",
        "  def __init__(self, monomers = []):\n",
        "    \"\"\" Constructor method for Polymer.\n",
        "    In addition to setting the monomers list, also calculates all break probabilities\n",
        "    of the bonds it contains using reset_break_probability.\n",
        "    \"\"\"\n",
        "    self._monomers = monomers\n",
        "    #self.reset_break_probability()\n",
        "    #keeps track of the age of itself(number of iterations it has survived)\n",
        "    self._age = 0\n",
        "\n",
        "  def __str__(self):\n",
        "    \"\"\" str function for Polymer class. \"\"\"\n",
        "    return f\"\\nA polymer of length {self.get_length()}: {self.get_sequence()}\"\n",
        "  \n",
        "  def __repr__(self):\n",
        "    \"\"\" repr function for Polymer class. \"\"\"\n",
        "    return f\"{self.get_sequence()}-polymer\""
      ],
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "67fSyVs_Tdlh",
        "colab_type": "text"
      },
      "source": [
        "### Getters, Setters, and Logs"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ziWCTo2GTcrv",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Polymer\n",
        "\n",
        "\n",
        "def get_monomers(self):\n",
        "  \"\"\" Return list of monomers in the polymer. \"\"\"\n",
        "  return self._monomers\n",
        "\n",
        "\n",
        "def get_length(self):\n",
        "  \"\"\" Return the number of monomers in the polymer. \"\"\"\n",
        "  return len(self._monomers)\n",
        "\n",
        "\n",
        "def get_sequence(self):\n",
        "  \"\"\" Return the sequence of monomers in the polymer in a human-readable (and loggable) format. \"\"\"\n",
        "  sequence = []\n",
        "  for monomer in self.get_monomers():\n",
        "    sequence.append(monomer.get_handedness())\n",
        "  return sequence\n",
        "\n",
        "def get_age(self):\n",
        "  \"\"\"\n",
        "  Getter method for the age of the polymer\n",
        "  \"\"\"\n",
        "  return self._age\n",
        "\n",
        "\n",
        "def set_age(self, newage):\n",
        "  \"\"\"\n",
        "  Setter method for the age of the polymer\n",
        "  \"\"\"\n",
        "  self._age = newage\n",
        "\n",
        "def set_monomers(self, new_monomers):\n",
        "  \"\"\" Set the monomers in the polymer to new_monomers. \"\"\"\n",
        "  self._monomers = new_monomers\n",
        "\n",
        "def get_avg_age(self):\n",
        "  \"\"\"\n",
        "  calculates the average age of the monomers in the polymer\n",
        "  \"\"\"\n",
        "  totalage = 0\n",
        "  for n in range(self.get_length()):\n",
        "    totalage += self.get_monomers()[n].get_age()\n",
        "  avgage= totalage/self.get_length()\n",
        "  return avgage\n",
        "\n",
        "\n",
        "def get_chirality(self):\n",
        "  \"\"\" Return the chiralities of the monomers within the polymer.\n",
        "\n",
        "  RETURN: tuple\n",
        "  (number_lefts, number_rights)\n",
        "  \"\"\"\n",
        "  #Get the monomer handednesses\n",
        "  sequence = self.get_sequence()\n",
        "  #Count the number of trues\n",
        "  n_true = sum(sequence)\n",
        "  #The number of falses is the total minus the number of trues\n",
        "  #Return that.\n",
        "  return (n_true, len(sequence) - n_true)\n",
        "\n",
        "def birthday(self):\n",
        "  \"\"\"\n",
        "  Ages up the polymer and all of the monomers in the polymer\n",
        "  \"\"\"\n",
        "  self._age += 1\n",
        "  for n in range(self.get_length()):\n",
        "    self.get_monomers()[n].birthday()\n",
        "    \n",
        "\n",
        "def get_signed_ee(self):\n",
        "  lefts, rights = self.get_chirality()\n",
        "  return (lefts - rights) / self.get_length()\n",
        "\n",
        "def get_ee(self):\n",
        "  lefts, rights = self.get_chirality()\n",
        "  return abs((lefts - rights) / self.get_length())\n",
        "\n",
        "#def get_leftrighthomochiralbonds(self):\n",
        "  #\"\"\"\n",
        "  #returns  # of left and right homochiral bonds in tuple (l,r)\n",
        "  #\"\"\"\n",
        "  #l=0\n",
        "\n",
        "  #r=0\n",
        "\n",
        "  #for n in range(self.get_length()):\n",
        "    #if (self.easthomochiralbiascheck(n) == 3):\n",
        "         # l += 1\n",
        "    #elif (self.easthomochiralbiascheck(n) == 5):\n",
        "        #  r += 1\n",
        "  #tuple1 = (l , r)\n",
        "  \n",
        "  #return tuple1\n",
        "  \n",
        "def generate_old_log(self):\n",
        "  \"\"\" Return a log tuple in the format\n",
        "  (length, signed ee, total # homochiral bonds)\n",
        "  \"\"\"\n",
        "  return (self.get_length(), \n",
        "          self.get_signed_ee())\n",
        "          #sum(self.get_leftrighthomochiralbonds()))\n",
        "  \n",
        "def generate_log(self):\n",
        "  \"\"\" Return a log tuple formatted simply as the list of boolean handednesses of the monomers contained\n",
        "  in the polymer. Will be heavier than holding data about the polymer like in the other log format,\n",
        "  but should allow access to more information and more kinds of information.\n",
        "  \"\"\"\n",
        "  return tuple(self.get_sequence())"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IdB8k_yadghA",
        "colab_type": "text"
      },
      "source": [
        "### Functionality methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Xa_gIPs0dcjS",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Polymer\n",
        "\n",
        "def append(self, other):\n",
        "  \"\"\"\n",
        "  Adds a reactable (monomer or polymer) to the end of the Polymer.\n",
        "  If the added reactable is a polymer, append() deletes it after taking its monomers.\n",
        "  \"\"\"\n",
        "  #Check the type of thing to add\n",
        "  if isinstance(other, Monomer):\n",
        "    #Monomers can just be appended to the list\n",
        "    self._monomers.append(other)\n",
        "  elif isinstance(other, Polymer):\n",
        "    #For polymers we need to extend rather than append, to avoid nested lists\n",
        "    self._monomers.extend(other.get_monomers())\n",
        "    #Then once the monomers are safely in their new polymer, the old one is deleted\n",
        "    del other\n",
        "\n",
        "def brkloc(self):\n",
        "\n",
        "  #makes a list of all the indices of monomers in the polymer except \n",
        "  #for the last one\n",
        "  indices = []\n",
        "  for n in range(self.get_length() - 1):\n",
        "    indices.append(n)\n",
        "  #puts indices in random order\n",
        "  random.shuffle(indices)\n",
        "  #tests if each indices will break\n",
        "  for index in indices:\n",
        "    #gets the breakprobability for monomer at n index\n",
        "    brkprob = self._monomers[n].get_eastbrkprob()\n",
        "    rand = get_rand()\n",
        "    # checks if the random number is less than the brkprob then the index of\n",
        "    #the monomer is returned from the method\n",
        "    #indicating this polymer breaks at the east bond of this monomer\n",
        "    if(brkprob > rand):\n",
        "      return n\n",
        "  return None\n",
        "\n",
        "def removeright(self,location):\n",
        "  \"\"\"\n",
        "  Removes all monomers to the right (east) of a given index\n",
        "  \"\"\"\n",
        "  #creates a list of monomers in the polymer to the left, and including,\n",
        "  #the monomer at the location(index) provided\n",
        "  newList = self._monomers[0:location+1]\n",
        "\n",
        "  #makes a list of the monoers to the rightof the monomer at the \n",
        "  #index provided\n",
        "  removed = self._monomers[location+1:]\n",
        "\n",
        "  #sets the polymers monomers to newList(the monomers to the left\n",
        "  #of  and the index provided)\n",
        "  self.set_monomers(newList)\n",
        "  #print(\"after breaking ractable is:\",self)\n",
        "  #print(\"after breaking removed is:\",removed)\n",
        "\n",
        "  #returns the monomers that were removed, everything the right\n",
        "  #of the index provided\n",
        "  return removed"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1lx9FPNLeRNM",
        "colab_type": "text"
      },
      "source": [
        "### Homochirality handling"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "THNcbUmt1vm7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Polymer\n",
        "def easthomochiralcheck(self,numbermonomer):\n",
        "  \"\"\"\n",
        "  Takes the index of a monomer within the Polymer and returns whether its east bond is homochiral.\n",
        "  \"\"\"\n",
        "  #First check that the index isn't out of bounds \n",
        "  if (0 > numbermonomer or numbermonomer >= self.get_length()-1):\n",
        "    return False\n",
        "  #get the handedness of this monomer and its east neighbor, and return whether or not they're equal (bool)\n",
        "  return self._monomers[numbermonomer].get_handedness() == self._monomers[numbermonomer+1].get_handedness()\n",
        "\n",
        "def easthomochiralbiascheck (self, numbermonomer):\n",
        "  \"\"\" this method can be used in place of the east homochiral check method\n",
        "  returns false if not homochiral, 3 if homochiral left, 5 if homochiral right\"\"\"\n",
        "\n",
        "  #First check that the index isn't out of bounds or if not homochiral\n",
        "  if (0 > numbermonomer or numbermonomer >= self.get_length()-1 or not self.easthomochiralcheck(numbermonomer)):\n",
        "    return False\n",
        "  \n",
        "  #otherwise check if they are homochiral left or right\n",
        "  elif self._monomers[numbermonomer].get_handedness():\n",
        "      #means left homochiral\n",
        "      return 3\n",
        "  elif not self._monomers[numbermonomer].get_handedness():\n",
        "      #means right homochiral\n",
        "      return 5\n",
        "  \n",
        "\n",
        "def eastbondbreakprobability(self,numbermonomer):\n",
        "  \"\"\"\n",
        "  Takes the index of a monomer within the Polymer\n",
        "  Returns the probability that the monomer's east bond will break\n",
        "  returns -3 if the monomer has no east bond\n",
        "  \"\"\"\n",
        "  ##############################\n",
        "  #Override to return an equal break chance for every bond in the polymer\n",
        "  #Simply comment out this line to get the regular function\n",
        "  #return (0.3)\n",
        "  ##############################\n",
        "\n",
        "  #First check if the monomer is the last one in the polymer\n",
        "  if (numbermonomer >= self.get_length()-1):\n",
        "    #If so, it doesn't have an east bond to break, so the probability is 0(return -3)\n",
        "    return -3\n",
        "    \n",
        "  #now we initialize brk probability (brk)\n",
        "  brk = (BASE_BOND_BREAK_PROBABILITY) * (LENGTH_FACTOR**(self.get_length()/N))\n",
        "  #check if the east bond is homochiral\n",
        "  if (self.easthomochiralcheck(numbermonomer)):\n",
        "    #if so multiply it by homochiral break factor (shrinks probability)\n",
        "    brk *= HOMOCHIRAL_BREAK_FACTOR\n",
        "    #goes through method which checks and calculates benefit of all homochiral neighbors\n",
        "    brk = self.checkforhomochiralneighbors(numbermonomer,brk,HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR)\n",
        "  #end def: returns break probability of monomers east bond\n",
        "  return brk\n",
        "\n",
        "def biaseastbondbreakprobability(self,numbermonomer):\n",
        "  \"\"\"\n",
        "  ***left-right sensitivity****\n",
        "  Takes the index of a monomer within the Polymer\n",
        "  Returns the probability that the monomer's east bond will break\n",
        "  returns -3 if the monomer has no east bond\n",
        "  \"\"\"\n",
        "  ##############################\n",
        "  #Override to return an equal break chance for every bond in the polymer\n",
        "  #Simply comment out this line to get the regular function\n",
        "  #return (0.3)\n",
        "  ##############################\n",
        "  \n",
        "  #First check if the monomer is the last one in the polymer\n",
        "  if (numbermonomer >= self.get_length()-1):\n",
        "    #If so, it doesn't have an east bond to break, so the probability is 0 (returns -3)\n",
        "    return -3\n",
        "  \n",
        "  #initialize the brk probability\n",
        "  brk = (BASE_BOND_BREAK_PROBABILITY) * (LENGTH_FACTOR**(self.get_length()/N))\n",
        "\n",
        "  #check if the east bond is homochiral left\n",
        "  if (self.easthomochiralbiascheck(numbermonomer) == 3):\n",
        "    brk *= HOMOCHIRAL_BREAK_FACTOR_LEFT\n",
        "\n",
        "    #run through function that recalculates brk based on benfits of homochiral neighbors\n",
        "    brk = self.checkforhomochiralneighbors(numbermonomer, brk, HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_LEFT)\n",
        "\n",
        "  #otherwise checks if bond is homochiral right\n",
        "  elif (self.easthomochiralbiascheck(numbermonomer) == 5):\n",
        "    brk *= HOMOCHIRAL_BREAK_FACTOR_RIGHT\n",
        "\n",
        "    #run through function that recalculates brk based on benfits of homochiral neighbors\n",
        "    brk = self.checkforhomochiralneighbors(numbermonomer,brk, HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_RIGHT)\n",
        "   \n",
        "  return brk\n",
        "\n",
        "def checkforhomochiralneighbors(self, numbermonomer, brk, neighborfactor):\n",
        "\n",
        "  \"\"\"\n",
        "  helps all the versions of the eastbond break calculating functions\n",
        "  takes in a brk probability a number monomer and the desired neighbor improvement factor\n",
        "  and calculates how the neighbors a bond will increase the strength of the bond\n",
        "  it then returns the new brk prob to the eastbond brk function\n",
        "  \"\"\"\n",
        "  brk = brk\n",
        "  j = numbermonomer + 1\n",
        "  #going right to check for homochiral neighbors\n",
        "  while(self.easthomochiralcheck(j)):\n",
        "    #calculates decrease to brk prob for a neighbor of that distance for the bond\n",
        "    brk *= 1 - (neighborfactor**abs(j - numbermonomer))\n",
        "    j += 1\n",
        "\n",
        "  #going left to check for homochiral neighbors\n",
        "  j=numbermonomer-1\n",
        "  while(self.easthomochiralcheck(j)):\n",
        "    #calculates decrease to brk prob for a neighbor of that distance for the bond\n",
        "    brk *= 1-(neighborfactor**abs(numbermonomer - j))\n",
        "    j -= 1\n",
        "\n",
        "  return brk\n",
        "\n",
        "\n",
        "def poissonbreakprobability(self,numbermonomer):\n",
        "  \"\"\"\n",
        "  Takes the index of a monomer within the Polymer\n",
        "  Returns the probability that the monomer's east bond will break\n",
        "  based on Poisson distribution\n",
        "  returns -3 if the monomer has no east bond\n",
        "  \"\"\"\n",
        "\n",
        "  #First check if the monomer is the last one in the polymer\n",
        "  if (numbermonomer >= self.get_length()-1):\n",
        "    #If so, it doesn't have an east bond to break, so the probability is 0(return -3)\n",
        "    return -3\n",
        "\n",
        "  #With that out of the way, we initialize brk to the base probability of breaking a bond\n",
        "  brk = (BASE_BOND_BREAK_PROBABILITY) * (LENGTH_FACTOR**(self.get_length()/N))\n",
        "\n",
        "  #keeps track of the number of the total consecutive homochiral bonds\n",
        "  homochiralcount=0 \n",
        "\n",
        "  #check if the east bond is homochiral\n",
        "  if (self.easthomochiralcheck(numbermonomer)):\n",
        "    #if so homochiral count increases by 1\n",
        "    homochiralcount +=1\n",
        "    #brk gets benefited by the poisson distribution of homochiral count \n",
        "    brk *= 1-(1.3*(poissonequation(homochiralcount)))\n",
        "\n",
        "    #set j to monomer to right\n",
        "    j = numbermonomer+1\n",
        "\n",
        "    #going right to check for neighboring homochirality\n",
        "    while(self.easthomochiralcheck(j)):\n",
        "      #if homochiral increases count\n",
        "      homochiralcount += 1\n",
        "      #recalculates brk prob\n",
        "      brk *= 1-(1.3*(poissonequation(homochiralcount)))\n",
        "\n",
        "      #check next monomer\n",
        "      j += 1\n",
        "\n",
        "    #going left to check for neighboring homochirality\n",
        "    j=numbermonomer-1\n",
        "    while(self.easthomochiralcheck(j)):\n",
        "      homochiralcount += 1\n",
        "      brk *= 1-(1.3*(poissonequation(homochiralcount)))\n",
        "      j -= 1\n",
        "\n",
        "  return brk\n",
        "\n",
        "\n",
        "def reset_break_probability(self):\n",
        "    \n",
        "  \"\"\" \n",
        "  resets the break probabilities of the monomers in a \n",
        "  sequence. 1)checks lookup table to see if similar polymer values\n",
        "  have been caluclated, otherwise calculates values and adds\n",
        "  polymer to lookup table 2)sets values to monomers.\n",
        " \n",
        "  \"\"\"\n",
        "  #store self as list of booleans to be added to lookup table\n",
        "  polyseq = self.get_monomers().copy()\n",
        "  for n in range(self.get_length()):\n",
        "    polyseq[n] = polyseq[n].get_handedness()\n",
        "\n",
        "\n",
        "  # All stored sequences start with True. If the one being requested doesn't, invert so that it does\n",
        "  #comment out if right/left sensitivity is included\n",
        "  if polyseq[0] == True:\n",
        "    polyseq = [not mono for mono in polyseq]\n",
        "\n",
        "  #make polyseq a tuple able to be added as an index of a dictionary  \n",
        "  polyseq = tuple(polyseq)\n",
        "\n",
        "  # If the sequence is already in the table (dict), retrieves its previously calculated break probabilities\n",
        "  if polyseq in break_prob_lookup_table:\n",
        "    the_probs = break_prob_lookup_table[polyseq]\n",
        "    \n",
        "  else: # Otherwise calculate and add to the lookup table\n",
        "    # Calculate the break probabilities\n",
        "    the_probs = self.calculatebrkprob()\n",
        "    #and add it to the lookup table\n",
        "    break_prob_lookup_table[polyseq] = the_probs\n",
        "\n",
        "  #set monomers eastbond brk probs to correlated values stored in the_probs\n",
        "  for n in range (self.get_length()):\n",
        "    self._monomers[n].set_eastbrkprob(the_probs[n])\n",
        "\n",
        "  #end def: polymer break probabilities recalculated and added\n",
        "  #to lookup table (if not already there)\n",
        "\n",
        "def calculatebrkprob(self):\n",
        "    \n",
        "  \"\"\"\n",
        "  generates and returns a list of break probabilities for the monomers at each index of\n",
        "  a polymer. This method can be altered to calculate normally\n",
        "  with left/right sensitivity or with a poisson distribution\n",
        " \n",
        "  \"\"\"\n",
        "\n",
        "  #initialize brk_probs as an empty list\n",
        "  brk_probs = []\n",
        "  \n",
        "  #checks if polymer is of length one -meaning it is lone monomer\n",
        "  if self.get_length() == 1 :\n",
        "    #if so adds -1 to list(brk prob value assigned to individual monomers)\n",
        "    brk_probs.append(-1)\n",
        "    \n",
        "  else:\n",
        "    #otherwise goes through all the indices of the polymer,calculates its brk probability, and appends it to brk_probs \n",
        "    for n in range(self.get_length()):\n",
        "\n",
        "      #############################################################\n",
        "      #LEFT RIGHT SENSITIVITY/POISSON EQUATIONS CHOICE.           #\n",
        "      #pick one-comment out the rest.                             #\n",
        "      #############################################################\n",
        "\n",
        "      #this line if uncommented will have left/right sensitivity\n",
        "      #brk_probs.append(self.biaseastbondbreakprobability(n))\n",
        "\n",
        "      #this line if uncommented will calculate probabilities normally\n",
        "      #brk_probs.append(self.eastbondbreakprobability(n))\n",
        "\n",
        "      #this line if uncommented will calculate brk probabilities with poisson distribution\n",
        "      brk_probs.append(self.poissonbreakprobability(n))\n",
        "\n",
        "  #returns in order list of brk probs for the east bond of all the monomers in a polymer\n",
        "  return brk_probs\n"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oV4UK3XdkNoF",
        "colab_type": "text"
      },
      "source": [
        "## The Reactables class"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NPkloQE3XbaD",
        "colab_type": "text"
      },
      "source": [
        "This is the Reactables class aka the stylish little bag we keep our contestants in. As all good dating shows, we define our members by the relationship they are in. So a single monomer will be addd to the bag alone, but a monomer in a polymer will not be. Rather each polymer will be recorded once. Its like if you have charlie, ben, and jack. Jack and Ben are in a relationship so they are jointly called Jen. If these three were in the reactable bag they would be recognized as two things, charlie and Jen(Ben+JAck). The reactable class is the heart and center of our game- I mean dating- show. Its here we ask all the members just the right questions to get them falling in love and breaking hearts, and then we are curteous enough to do all the splitting and merging for them. "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HVY41XQPUjIT",
        "colab_type": "text"
      },
      "source": [
        "### Constructor"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "JAdpBmhBUuGc",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "class Reactables:\n",
        "\n",
        "  def __init__(self, reactables = []):\n",
        "    \"\"\"\n",
        "    Constructor class for Reactables object\n",
        "    Accepts list of reactables or defaults to empty list\n",
        "    Reactables functions as a bin for reactable objects monomer and polymer\n",
        "    Methods consist mostly of list handling\n",
        "    \"\"\"\n",
        "    self._reactables = reactables\n",
        "    #The reactables bag also handles remembering its history\n",
        "    self._history = []\n",
        "    #self._leftrighthistory = []\n",
        "    #list of the age of the polymers in the reactables bag. \n",
        "    self._agehistory = []\n",
        "    self._lookup = {}\n",
        "    self._hist_stats = pd.DataFrame()\n",
        "\n",
        "\n",
        "  def __str__(self):\n",
        "    \"\"\"\n",
        "    str method for Reactables class\n",
        "    \"\"\"\n",
        "    return str(self.get_reactables())"
      ],
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hqD3AL_kUldF",
        "colab_type": "text"
      },
      "source": [
        "### Getters and Setters"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7hRne9W9U3No",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "#################\n",
        "#GETTERS/SETTERS#\n",
        "#################\n",
        "\n",
        "def get_reactables(self):\n",
        "  \"\"\"\n",
        "  Getter method for reactables in Reactables\n",
        "  Returns a list of the objects currently in the Reactables bag\n",
        "  \"\"\"\n",
        "  return self._reactables\n",
        "\n",
        "def get_history(self):\n",
        "  \"\"\" Return the history of the reactables bag.\n",
        "  \"\"\"\n",
        "  return self._history\n",
        "\n",
        "#def get_leftrighthistory(self):\n",
        "  #return self._leftrighthistory\n",
        "\n",
        "def get_agehistory(self):\n",
        "  \"\"\"\n",
        "  Getter method for the age history of the reactables bag\n",
        "  \"\"\"\n",
        "  return self._agehistory\n",
        "  \n",
        "def get_count(self):\n",
        "  \"\"\"\n",
        "  Getter method for Reactables class\n",
        "  Returns the number of objects in the Reactables bag\n",
        "  \"\"\"\n",
        "  return len(self.get_reactables()) \n",
        "\n",
        "\n",
        "def set_reactables(self, new_list):\n",
        "  \"\"\"\n",
        "  Setter method for the Reactables class\n",
        "  Sets the reactables bag to a new list\n",
        "  Used mostly as a helper function in bonding\n",
        "  \"\"\"\n",
        "  self._reactables = new_list\n",
        "\n",
        "def set_agehistory(self, newagehistory):\n",
        "  self._agehistory = newagehistory\n",
        "\n",
        "\n",
        "def get_bond_chance(self, reactable1, reactable2):\n",
        "  \"\"\"\n",
        "  Returns the probability that two given reactables in the reactables bag will bond\n",
        "  \"\"\"\n",
        "  return BOND_PROB\n",
        "\n",
        "def get_free_monomers(self):\n",
        "  return [r for r in self.get_reactables() if isinstance(r, Monomer)]\n",
        "\n",
        "def get_polymers(self):\n",
        "  return [r for r in self.get_reactables() if isinstance(r, Polymer)]\n",
        "\n",
        "def get_bound_monomers(self):\n",
        "  bound = []\n",
        "  for p in self.get_polymers():\n",
        "    bound.extend(p.get_monomers())\n",
        "  return bound\n",
        "\n",
        "#def record_leftrighthomochiral(self):\n",
        " # \"\"\"returns the number of left and right homochiral bonds, (left,right)\"\"\"\n",
        " # l=0\n",
        "  #r=0\n",
        "  #for polymer in self.get_polymers() :\n",
        "   # tuple1 = polymer.get_leftrighthomochiralbonds()\n",
        "    #l += tuple1[0]\n",
        "    #r += tuple1[1]\n",
        "  #tuple2 = (l , r)\n",
        "  #self._leftrighthistory.append(tuple2)\n",
        "  #return tuple2\n",
        "\n",
        "def get_stats(self):\n",
        "  return self._hist_stats\n",
        "\n",
        "def set_hist_stats(self,df):\n",
        "  self._hist_stats = df\n",
        "\n",
        "def get_lookup(self):\n",
        "  return self._lookup\n",
        "\n",
        "def add_stat_lookup(self, key, value):\n",
        "  self._lookup[key] = value"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HEFlHyn6UoPU",
        "colab_type": "text"
      },
      "source": [
        "### Functionality methods"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cz4Cis4ze7j6",
        "colab_type": "text"
      },
      "source": [
        "#### Top level functionality"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UZMHOVm_fDL0",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "def refill(self, pool_size):\n",
        "  #Do we have less than the required number of things in the pool?\n",
        "  dearth = pool_size - self.get_count()\n",
        "  #If so,\n",
        "  if dearth > 0:\n",
        "    new = []\n",
        "    #Make as many monomers as we need to get back up to the riquired amount\n",
        "    for n in range(dearth):\n",
        "      new.append(Monomer())\n",
        "    #And add them to the reactables bag\n",
        "    self.add(new)\n",
        "\n",
        "def randomize_reactables(self):\n",
        "  \"\"\"\n",
        "  Randomizes the order of the reactables list\n",
        "  \"\"\"\n",
        "  #Get the current reactables\n",
        "  reactables = self.get_reactables()\n",
        "  #Shuffle them\n",
        "  random.shuffle(reactables)\n",
        "  #And reset the reactables list to the new sorted list\n",
        "  self.set_reactables(reactables)\n",
        "\n",
        "def do_the_thing(self):\n",
        "  \"\"\"\n",
        "  Handle a single iteration of the reactables.\n",
        "\n",
        "  \"\"\"\n",
        "  #We keep track of bonding by storing the most recent reactable to choose to bond as the 'bachelor.'\n",
        "  bachelor = None\n",
        "  #We need a copy of the reactables because indices will change as soon as we start doing stuff\n",
        "  reactables = copy.copy(self.get_reactables())\n",
        "  #Iterate through each reactable\n",
        "  for item in reactables:\n",
        "    #Roll a random number in (0,1) to compare against our probabilities\n",
        "    roll = get_rand()\n",
        "    #If our reactable is a monomer...\n",
        "    if isinstance(item, Monomer):\n",
        "      #We get our breaking and bonding chances (parameters now, may become functions later?)\n",
        "      brk = POOF_CHANCE\n",
        "      bond = BOND_PROB\n",
        "      #If we roll to break the monomer\n",
        "      if 0 < roll <= brk:\n",
        "        #Just delete it\n",
        "        del item\n",
        "      #If we roll to bond the monomer\n",
        "      elif brk < roll <= brk+bond:\n",
        "        #Check if there's a reactable waiting to bond\n",
        "        if bachelor == None:\n",
        "          #If not, make this monomer the bachelor. Someone will come along to bond later.\n",
        "          bachelor = item\n",
        "        else:\n",
        "          #If there is someone waiting, bond them together and reset the bachelor chair to empty.\n",
        "          self.bond_pair(bachelor, item)\n",
        "          bachelor= None\n",
        "      else:\n",
        "        continue\n",
        "    #If the reactable is a polymer instead...\n",
        "    elif isinstance(item, Polymer):\n",
        "      #Choose whether the polymer will break or bond. It's 50-50 right now.\n",
        "      if roll >= 0.33:\n",
        "        #This is the same bonding logic as for the monomer. It's not in a helper function because it needs to be able to access bachelor.\n",
        "        if bachelor == None:\n",
        "          bachelor = item\n",
        "        else:\n",
        "          self.bond_pair(bachelor, item)\n",
        "          bachelor = None\n",
        "      #Here's what happens if the polymer is chosen to check breaking\n",
        "      else:\n",
        "        #It finds its break location\n",
        "        break_spot = item.brkloc()\n",
        "        #Which might turn out to be nowhere.\n",
        "        if break_spot != None:\n",
        "          #If somewhere does break, call break_polymer to handle the breaking\n",
        "          self.break_polymer(item,break_spot)\n",
        "    else:\n",
        "      #You never know what might end up in your reactables bag\n",
        "      raise ValueError(\"This thing is neither a monomer or a polymer. What?!\")\n",
        "\n",
        "def iterate(self,size):\n",
        "  \"\"\"\n",
        "  Handles full sequence of iteration\n",
        "  \"\"\"\n",
        "  self.randomize_reactables()\n",
        "  self.do_the_thing()\n",
        "  self.log()\n",
        "  self.ageup()\n",
        "  #self.record_leftrighthomochiral()\n",
        "  self.refill(size)"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ALnPeaUCfhL4",
        "colab_type": "text"
      },
      "source": [
        "#### Functionality helpers"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hpqCXL48VGTB",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "\n",
        "def add(self, new_reactables):\n",
        "  \"\"\"\n",
        "  Adds a list of reactables to the reactables bag\n",
        "  Built on extend(); argument must be iterable\n",
        "  \"\"\"\n",
        "  #print(\"list of new Reactbles\", new_reactables)\n",
        "  #print(\"list of get Reactables:\",self.get_reactables())\n",
        "  self.get_reactables().extend(new_reactables)\n",
        "  #print(\"reactables list is now\",self.get_reactables())\n",
        "\n",
        "\n",
        "def subtract(self, removables):\n",
        "  \"\"\"\n",
        "  Removes a list of reactables from the reactables bag\n",
        "  Built on list comprehension; argument must be iterable\n",
        "  \"\"\"\n",
        "  self.set_reactables([reactable for reactable in self.get_reactables() if not (reactable in removables)])\n",
        "\n",
        "\n",
        "def bond_pair(self, west, east):\n",
        "  \"\"\"\n",
        "  Accepts two reactables from the bag\n",
        "  Bonds them together, handling deletion of any emptied polymer\n",
        "  \"\"\"\n",
        "\n",
        "  #this is my attempt to get the ages working properly the idea is:\n",
        "\n",
        "  #if both are polymers or both are monomers:\n",
        "  if (type(west) == type(east) and type(west) == Polymer):\n",
        "    #set the new age to the maximum age of the polymers\n",
        "    age = max(west.get_age(), east.get_age())\n",
        "  \n",
        "  if (type(west) == type(east) and type(west) == Monomer):\n",
        "    #set age to 0 it is a brand new polymer\n",
        "    age = 0\n",
        "\n",
        "  #if only one is a polymer:\n",
        "  elif isinstance(west, Polymer) and isinstance(east, Monomer):\n",
        "    #set the age to the age of the polymer\n",
        "    age = west.get_age()\n",
        "  elif isinstance(west, Monomer) and isinstance(east, Polymer):\n",
        "    # set the age to the age of the polymer\n",
        "    age = east.get_age()\n",
        "\n",
        "  #Take your two reactables and check if the west one is a monomer or a polymer \n",
        "  if isinstance(west, Polymer):\n",
        "    #If it's a polymer, all you've got to do is append the east item and then take it out of the bag\n",
        "    west.append(east)\n",
        "    self.subtract([east])\n",
        "    #recalculate the breakprobabilities of the bonds in polymer\n",
        "    west.reset_break_probability()\n",
        "    #set new polymer to age that was calculated before\n",
        "    west.set_age(age)\n",
        "\n",
        "  if isinstance(west, Monomer):\n",
        "    #If west friend is a Monomer, then make a new polymer containing west\n",
        "    newpoly = Polymer([west])\n",
        "    #Add the east things to it\n",
        "    newpoly.append(east)\n",
        "    #Remove both the west monomer and the east thing\n",
        "    self.subtract([east])\n",
        "    self.subtract([west])\n",
        "    #And put the new polymer into the reactables bag\n",
        "    self.add([newpoly])\n",
        "    #recalculates break probability\n",
        "    newpoly.reset_break_probability()\n",
        "    #set new polymer to age that was calculated before\n",
        "    newpoly.set_age(age)\n",
        "\n",
        "\n",
        "\n",
        "def break_polymer(self, polymer, brk_location):\n",
        "  #breaks polymer at given location and creates a new polymer of the \n",
        "  #monomers removed\n",
        "  #when polymer is made-breakprobabilities are calculated\n",
        "  newPolymer = Polymer(polymer.removeright(brk_location))\n",
        "  #if(newPolymer._monomers[0].get_handedness() and polymer._monomers[-1].get_handedness()):\n",
        "    #print (\"left breaking when literally impossible????\")\n",
        "  #if(not newPolymer._monomers[0].get_handedness() and not polymer._monomers[-1].get_handedness()):\n",
        "   # print(\"right breaking\")\n",
        "  polys = [newPolymer, polymer]\n",
        "  #resets break probabilities in polymers\n",
        "  #goes throught the two new polymers\n",
        "  for poly in polys:\n",
        "    #resets break probabilities in polymers\n",
        "    polymer.reset_break_probability()\n",
        "    if poly.get_length()==0:\n",
        "      print(\"whyyyyyyyyyyy is this happening????\")\n",
        "    #checks if they are of length 1\n",
        "    if poly.get_length() <= 1:\n",
        "      #adds them to reactable as a single monomer\n",
        "      self.add(poly.get_monomers())\n",
        "      #subtracts polymer from reactable list\n",
        "      self.subtract([poly])\n",
        "      del poly\n",
        "    #checks if the polymer is not in the reactables list\n",
        "    elif (poly not in self.get_reactables()):\n",
        "      #add polymer to reactable list\n",
        "      self.add([poly])\n",
        "\n",
        "    \n",
        "\n"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CmKsCAazVPy_",
        "colab_type": "text"
      },
      "source": [
        "### Current state data methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4FVYtSkYVZ7n",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "def get_overall_chirality(self):\n",
        "  \"\"\" Return the total quantity of left- and right-handed monomers in the reactable\n",
        "    pool, including monomers within polymers.\n",
        "\n",
        "  RETURN tuple\n",
        "  (Left-handed_quantity, Right-handed_quantity)\n",
        "  \"\"\"\n",
        "  left_count = 0\n",
        "  right_count = 0\n",
        "  for reactable in self.get_reactables():\n",
        "    if isinstance(reactable, Monomer):\n",
        "      if reactable.get_handedness():\n",
        "        left_count += 1\n",
        "      else:\n",
        "        right_count += 1\n",
        "    elif isinstance(reactable, Polymer):\n",
        "      l, r = reactable.get_chirality()\n",
        "      left_count += l\n",
        "      right_count += r\n",
        "    else:\n",
        "      print(f\"{reactable}, which is a {type(reactable)}\")\n",
        "      raise ValueError\n",
        "  return (left_count, right_count)\n",
        "\n",
        "def get_polymer_chirality(self):\n",
        "  \"\"\" Return the total quantity of left- and right-handed monomers in the polymers\n",
        "  within the reactable pool.\n",
        "\n",
        "  RETURN tuple\n",
        "  (Left-handed_quantity, Right-handed_quantity)\n",
        "  \"\"\"\n",
        "  left_count = 0\n",
        "  right_count = 0\n",
        "  for reactable in self.get_reactables():\n",
        "    if isinstance(reactable, Polymer):\n",
        "      l, r = reactable.get_chirality()\n",
        "      left_count += l\n",
        "      right_count += r\n",
        "  return (left_count, right_count)\n",
        "\n",
        "def get_free_proportion(self):\n",
        "  \"\"\"Return the proportion of free monomers to total population\"\"\"\n",
        "  return len(self.get_free_monomers())/self.unit_count()\n",
        "\n",
        "def unit_count(self):\n",
        "  \"\"\"return the total number of monomers in the bag, both free and bound\"\"\"\n",
        "  bound = 0\n",
        "  for p in self.get_polymers():\n",
        "    bound += p.get_length()\n",
        "  return len(self.get_free_monomers()) + bound\n",
        "\n",
        "def get_polymer_ee(self):\n",
        "  ee = []\n",
        "  for polymer in self.get_polymers():\n",
        "    ee.append(polymer.get_signed_ee())\n",
        "  return ee\n",
        "\n",
        "def avg_ee_by_length(self):\n",
        "  \"\"\" Return a list containing the enantiomeric excess of all reactables sorted by size.\n",
        "  That is:\n",
        "  [(ee of monomers),(ee of 2-mers),(ee of 3-mers) etc]\n",
        "  \"\"\"\n",
        "  output = []\n",
        "  for n in range(1,self.max_length()+1):\n",
        "    group = self.get_reactables_by_length(n)\n",
        "    ees = []\n",
        "    # print(f\"For length {n} I got {len(group)} reactables.\")\n",
        "    if len(group) > 0:\n",
        "      # eestr = \"\"\n",
        "      for r in group:\n",
        "        ees.append(r.get_ee())\n",
        "        # eestr += f\", {r.get_ee()}\"\n",
        "      output.append(np.mean(ees))\n",
        "      # print(f\"The ee's of this length were {eestr}.\\nThe average ee was {np.mean(ees)}.\")\n",
        "    else:\n",
        "      output.append(0)\n",
        "  return output\n",
        "\n",
        "def get_reactables_by_length(self,length):\n",
        "  if length <= 1:\n",
        "    #return the monomers\n",
        "    return self.get_free_monomers()\n",
        "  else:\n",
        "    return [p for p in self.get_polymers() if p.get_length() == length]\n",
        "\n",
        "def max_length(self):\n",
        "  \"\"\" Return the length of the longest polymer in the reactables bag.\n",
        "  \"\"\"\n",
        "  length = 0\n",
        "  for p in self.get_polymers():\n",
        "    if p.get_length() > length:\n",
        "      length = p.get_length()\n",
        "  return length\n",
        "\n",
        "def ageup(self):\n",
        "  \"\"\"\n",
        "  Method that ages up every reactable in the reactables bag\n",
        "  \"\"\"\n",
        "  for reactable in self.get_reactables():\n",
        "    reactable.birthday()\n",
        "    \n",
        "\n",
        "def logagehistory (self):\n",
        "  \"\"\"\n",
        "  Method that logs the age of the molecules in the current iteration. Only logs the polymers ages.\n",
        "  \"\"\"\n",
        "  log = []\n",
        "  #gets all the polymers in an iteration\n",
        "  polymers = self.get_polymers()\n",
        "  #Goes through polymers\n",
        "  for molecule in polymers:\n",
        "    #appends age to log\n",
        "    log.append(molecule.get_age())\n",
        "    #returns log of a list of ages of the polymers of current iteration\n",
        "  return log\n",
        "  \n",
        "\n"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FVHgjYMhkuri",
        "colab_type": "text"
      },
      "source": [
        "### History handling methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "tps6afh4kzUe",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "# def old_log(self):\n",
        "#   \"\"\" Translate current reactables list into a lighter-weight list of tuples \n",
        "#     describing the bag state, then logs that list into self._history.\n",
        "#     Log format: (length,signed_ee)\n",
        "#     e.g.  True-monomer would be (1,1)\n",
        "#           [False, True, False, False]-polymer would be (4,-0.5)\n",
        "#     \"\"\"\n",
        "#   log = []\n",
        "#   for r in self.get_reactables():\n",
        "#     log.append(r.generate_old_log())\n",
        "#   (self._history).append(log)\n",
        "\n",
        "def log(self):\n",
        "  \"\"\" Translate current reactables into a loggable list of tuples.\n",
        "  This log keeps the full sequences of the polymers without digesting the data, \n",
        "  so it should be more flexible as we more forward with pulling new information\n",
        "  out of this simulation. \n",
        "  There is one major piece of information lost, however, which is the identities\n",
        "  of the individual polymers and monomers. \"\"\"\n",
        "  log = []\n",
        "  for r in self.get_reactables():\n",
        "    log.append(r.generate_log())\n",
        "  (self._history).append(log)\n",
        "  #appends the iterations age to the age history\n",
        "  self._agehistory.append(self.logagehistory())\n",
        "  \n",
        "\n",
        "\n",
        "\n",
        "\n",
        "# def get_iter_polymers_by_length(self, single_iteration_log):\n",
        "#   # So we have something like this: [(t,f,f),(t),(f,f),(f),(t,t,t,f)]\n",
        "#   polymers_by_length = []\n",
        "#   lengths = [len(log) for log in single_iteration_log]\n",
        "#   biggest = max(lengths)\n",
        "#   for n in range(1, biggest+1):\n",
        "#     polys = [log for log in single_iteration_log if len(log) == n]\n",
        "#     if len(polys) > 0:\n",
        "#       polymers_by_length.append(polys)\n",
        "#     else:\n",
        "#       polymers_by_length.append([])\n",
        "#   return polymers_by_length\n",
        "\n",
        "# def get_iter_ees_by_length(self,single_iter_log):\n",
        "#   polymers_by_length = self.get_iter_polymers_by_length(single_iter_log)\n",
        "#   for length_category in polymers_by_length:\n",
        "#     for polymer in length_category:\n",
        "#       ee = hist_get_polymer_ee(polymer)\n",
        "\n",
        "\n",
        "def parse_history(self):\n",
        "    \"\"\" Create an array of plottable information from the history log. \"\"\"\n",
        "\n",
        "    # Column labels for History Handling #\n",
        "    Type = \"Type\"                   # Monomer or polymer\n",
        "    Length = \"Length\"               # How many monomers in the thing\n",
        "    nLefts = \"#Lefts\"               # How many left monomers in the thing\n",
        "    nRights = \"#Rights\"             # How many right monomers in the thing\n",
        "    Sequence = \"Sequence\"           # The string sequence of the thing\n",
        "    nLhomo = \"#LeftHomochiral\"      # The number of left homochiral bonds in the polymer\n",
        "    nRhomo = \"#RightHomochiral\"     # The number of right homochiral bonds in the polymer\n",
        "    nHomo = \"#Homochiral\"           # The overall number of homochiral bonds in the polymer\n",
        "    sEE = \"Signed ee\"               # The signed enantiomeric excess of the polymer (+ if more True)\n",
        "    pcHomo = \"%Homochirality\"       # The proportion of bonds in the polymer that are homochiral\n",
        "    pcLhomo = \"%LeftHomochirality\"  # The proportion of bonds in the polymer that are left homochiral\n",
        "    pcRhomo = \"%RightHomochirality\" # The proportion of bonds in the polymer that are right homochiral\n",
        "    Iter = \"Iteration\"              # The iteration number at which the item is found\n",
        "\n",
        "    \n",
        "    history = self.get_history()\n",
        "    individual_stats = pd.DataFrame()\n",
        "    for n in range(len(history)):\n",
        "        iteration = history[n]\n",
        "        for item in iteration:\n",
        "            # Translate\n",
        "            sequence = self.standard_form(item)\n",
        "\n",
        "            if len(item) == 1: # It's a monomer\n",
        "                #Is it in the lookup table?\n",
        "                if sequence not in self.get_lookup():\n",
        "                    # Get the info\n",
        "                    lr = self.count_LR(item)\n",
        "                    # And put it in the lookup table\n",
        "                    self.add_stat_lookup(sequence, {Type: 'Monomer', \n",
        "                                                    Length:1, \n",
        "                                                    nLefts:lr[0], \n",
        "                                                    nRights:lr[1],\n",
        "                                                    Sequence:sequence})\n",
        "                # Now that the data is searchable...\n",
        "                # Log it  \n",
        "                new_log = self.get_lookup().get(sequence)\n",
        "                new_log[Iter]=n\n",
        "                individual_stats = individual_stats.append(new_log, ignore_index=True)\n",
        "\n",
        "            elif len(item) > 1: # It's a polymer\n",
        "                #Is it in the lookup table?\n",
        "                if sequence not in self.get_lookup():\n",
        "                    # Get basic info\n",
        "                    length = len(item)\n",
        "                    lr = self.count_LR(item)\n",
        "                    bonds = self.homochiral_bond_counts(item)\n",
        "                    total_homos = bonds[0]+bonds[1]\n",
        "                    signed_ee = (lr[0]-lr[1])/(lr[0]+lr[1])\n",
        "                    homochirality = total_homos/(length-1)\n",
        "                    lhomochirality = bonds[0]/(length-1)\n",
        "                    rhomochirality = bonds[1]/(length-1)\n",
        "                    # And put it in the lookup table\n",
        "                    self.add_stat_lookup(sequence, {Type: 'Polymer', \n",
        "                                                    Length: length, \n",
        "                                                    nLefts:lr[0], \n",
        "                                                    nRights:lr[1],\n",
        "                                                    nLhomo:bonds[0],\n",
        "                                                    nRhomo:bonds[1],\n",
        "                                                    nHomo:total_homos,\n",
        "                                                    sEE:signed_ee,\n",
        "                                                    pcHomo:homochirality,\n",
        "                                                    pcLhomo:lhomochirality,\n",
        "                                                    pcRhomo:rhomochirality,\n",
        "                                                    Sequence:sequence})\n",
        "                # Now that the data is searchable...\n",
        "                # Log it\n",
        "                new_log = self.get_lookup().get(sequence)\n",
        "                new_log[Iter]=n\n",
        "                individual_stats = individual_stats.append(new_log, ignore_index=True)\n",
        "                \n",
        "            else:\n",
        "                raise ValueError(\"There's something with length 0 in your history.\")\n",
        "    self.set_hist_stats(individual_stats)\n",
        "\n"
      ],
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UkZ1_7xIy0Yd",
        "colab_type": "text"
      },
      "source": [
        "#### Low level info functions"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qJQfgfeSy5Me",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "## New ones ##\n",
        "\n",
        "  \n",
        "# Functions for getting the info we want to log\n",
        "    \n",
        "# Number of right and left monomers in a polymer (works on monomers too)\n",
        "\n",
        "\n",
        "def count_LR(self, log):\n",
        "    \"\"\" Return (n_Lefts, n_Rights) \"\"\"\n",
        "    if L and not R:\n",
        "        return (sum(log), len(log)-sum(log))\n",
        "    elif R and not L:\n",
        "        return (len(log)-sum(log), sum(log))\n",
        "    else:\n",
        "        raise ValueError(\"Your L's and R's are screwed up somehow.\")\n",
        "    \n",
        "\n",
        "\n",
        "# HOMOCHIRALITY SEQUENCES #\n",
        "\n",
        "def homochirality_sequence(self, log):\n",
        "  \"\"\" Return a boolean list of bonds within a given logged polymer, True if the bond is\n",
        "      homochiral. \"\"\"\n",
        "  return [i[0]==i[1] for i in list(more_itertools.pairwise(log))]\n",
        "\n",
        "def _is_L_True(self, log):\n",
        "    return log[:-1]\n",
        "\n",
        "\n",
        "def T_homochirality_sequence(self,h_seq,L_seq):\n",
        "    \"\"\" Return a boolean list of bonds within a polymer, true if the bond is \n",
        "    a homochiral bond between two True monomers. Parameters are the outputs of \n",
        "    homochirality_sequence() and _is_L_True(). \"\"\"\n",
        "    return eAnd(h_seq,L_seq)\n",
        "\n",
        "# HOMOCHIRAL BOND COUNTS #\n",
        "    \n",
        "\n",
        "def homochiral_bond_counts(self,log):\n",
        "    \"\"\" Return (number of left homochiral bonds, number of right homochiral bonds) \"\"\"\n",
        "    homo = self.homochirality_sequence(log)\n",
        "    west_true = log[:-1]\n",
        "    true_homochiral = eAnd(homo,west_true)\n",
        "    west_false = [not m for m in west_true]\n",
        "    false_homochiral = eAnd(homo,west_false)\n",
        "    if L and not R:\n",
        "        return (sum(true_homochiral), sum(false_homochiral))\n",
        "    elif R and not L: \n",
        "        return (sum(false_homochiral), sum(true_homochiral))\n",
        "    else:\n",
        "        raise ValueError(\"Your L's and R's are screwed up somehow.\")\n",
        "\n",
        "\n",
        "def get_polymer_chain_lengths(self,polylog):\n",
        "  \"\"\" Return the lengths of the homochiral chains in a given polymer log. \"\"\"\n",
        "  count = 1\n",
        "  lengths = [] \n",
        "  for n in range(1,len(polylog)):\n",
        "    if polylog[n] == polylog[n-1]:\n",
        "      count += 1\n",
        "    else:\n",
        "      lengths.append(count)\n",
        "      count = 1\n",
        "  lengths.append(count)\n",
        "  return lengths\n",
        "    \n",
        "\n",
        "def standard_form(self,poly):\n",
        "  if len(poly) == 0:\n",
        "    return ''\n",
        "  return ''.join(['L' if m else 'R' for m in poly])\n",
        "    \n",
        "\n",
        "\n",
        "\n",
        "## Old ones ##\n",
        "\n",
        "def hist_get_polymer_homochirality_of_bonds(self,polylog):\n",
        "  \"\"\" Return a boolean list of bonds within a given logged polymer, True if the bond is\n",
        "      homochiral. \"\"\"\n",
        "  return [i[0]==i[1] for i in list(more_itertools.pairwise(polylog))]\n",
        "\n",
        "def hist_get_polymer_ee(self,polylog):\n",
        "  \"\"\" Return the (signed) enantiomeric excess of a logged polymer. \"\"\"\n",
        "  length = len(polylog)\n",
        "  n_True = sum(polylog)\n",
        "  n_False = length - n_True\n",
        "  return (n_True - n_False) / length\n",
        "\n",
        "def hist_get_polymers(self,iteration):\n",
        "  \"\"\" Return a list of the polymer logs in an iteration. This is just the iteration\n",
        "  but without the monomers. \"\"\"\n",
        "  return [r for r in iteration if len(r) > 1]\n",
        "\n",
        "def hist_count_longest_homochiral_chain(self,polylog):\n",
        "  \"\"\" Return the length of the longest homochiral chain given the log of a polymer. \"\"\"\n",
        "  previous = None\n",
        "  count = 1\n",
        "  longest = 1\n",
        "  for monomer in polylog:\n",
        "    if monomer == previous:\n",
        "      count += 1\n",
        "    else:\n",
        "      longest = max(count, longest)\n",
        "      count = 1\n",
        "    previous = monomer\n",
        "  longest = max(count, longest)\n",
        "  return longest\n",
        "\n",
        "def hist_get_polymer_chain_lengths(self,polylog):\n",
        "  \"\"\" Return the lengths of the homochiral chains in a given polymer log. \"\"\"\n",
        "  count = 1\n",
        "  lengths = [] \n",
        "  for n in range(1,len(polylog)):\n",
        "    if polylog[n] == polylog[n-1]:\n",
        "      count += 1\n",
        "    else:\n",
        "      lengths.append(count)\n",
        "      count = 1\n",
        "  lengths.append(count)\n",
        "  return lengths\n",
        "\n",
        "def hist_get_iteration_chain_lengths(self,iteration):\n",
        "  \"\"\" Return the lengths of all the homochiral chains in polymers in a given iteration. \"\"\"\n",
        "  polymers = self.hist_get_polymers(iteration)\n",
        "  chain_lengths = []\n",
        "  for polymer in polymers:\n",
        "    chain_lengths.extend(self.hist_get_polymer_chain_lengths(polymer))\n",
        "  return chain_lengths\n",
        "\n",
        "# Other new ones #\n",
        "\n",
        "def hist_get_leftright_homochiral_count_iteration(self,iteration):\n",
        "  \"\"\"\n",
        "  returns a tuple (l,r)of the total number of left homochiral bonds and right homochiral bonds in an iteration \n",
        "  \"\"\"\n",
        "  #initilize l to keep track of the number of homochiral bonds\n",
        "  l=0\n",
        "  #initilize r to keep track of the number of homochiral bonds\n",
        "  r=0\n",
        "\n",
        "  #run through reactables in the iteration\n",
        "  for reactable in iteration:\n",
        "     #add the left homochiral bond count in each reactable\n",
        "     l += self.hist_get_leftright_homochiral_count_polymer(reactable)[0]\n",
        "     #add the right homochiral bond count in each reactable\n",
        "     r += self.hist_get_leftright_homochiral_count_polymer(reactable)[1]\n",
        "\n",
        "  #place l and r in a tuple\n",
        "  leftrightcount=(l,r)\n",
        "\n",
        "  #return the tuple\n",
        "  return leftrightcount\n",
        "\n",
        "def hist_get_leftright_homochiral_count_polymer(self,polymer):\n",
        "  \"\"\"\n",
        "  returns a tuple (l,r)of the total number of left homochiral bonds and right homochiral bonds in an polymer \n",
        "  \"\"\"\n",
        "\n",
        "  #initialize l to keep track of the number of left homochiral bonds\n",
        "  l=0\n",
        "  #initialize r to keep trac of the number of right homochiral bonds\n",
        "  r=0\n",
        "\n",
        "  #go through the monomers in the polymer\n",
        "  for monomer in range(len(polymer)-1):\n",
        "\n",
        "      #check if they are homochiral\n",
        "        if (polymer[monomer]== polymer[monomer+1]):\n",
        "          #if so check if they are homochiral left\n",
        "          if (polymer[monomer]):\n",
        "            #if so add one to l\n",
        "            l += 1\n",
        "          #otherwise check if they are homochiral right\n",
        "          elif (not polymer[monomer]):\n",
        "            #if so add one to r\n",
        "            r += 1\n",
        "  #place l and r in a tuple\n",
        "  leftrightcount= (l,r)\n",
        "  #return the tuple\n",
        "  return leftrightcount\n",
        "\n",
        "def hist_get_bond_status(self,polylog):\n",
        "  \"\"\" Iterate through the monomers in polylog ONCE to get number of left homochiral\n",
        "  and right homochiral bonds, as well as chain lengths if at all possible. \"\"\"\n",
        "  for m in polylog:\n",
        "    pass\n"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WdlB4JOXUq9i",
        "colab_type": "text"
      },
      "source": [
        "### Plotting methods"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "czdjDAVBPpQI",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "%%add_to Reactables\n",
        "\n",
        "def visualize_parameters(self,stamp=\"\"):\n",
        "  fig,ax = plt.subplots()\n",
        "\n",
        "  parameters = ['POOF_CHANCE','BOND_PROB','BASE_BOND_BREAK_PROBABILITY',\n",
        "                'HOMOCHIRAL_BREAK_FACTOR','HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR',\n",
        "                'LENGTH_FACTOR','HOMOCHIRAL_BREAK_FACTOR_LEFT',\n",
        "                'HOMOCHIRAL_BREAK_FACTOR_RIGHT',\n",
        "                'HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_LEFT',\n",
        "                'HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_RIGHT']\n",
        "  values = [POOF_CHANCE,BOND_PROB,BASE_BOND_BREAK_PROBABILITY,\n",
        "            HOMOCHIRAL_BREAK_FACTOR,HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR,\n",
        "            LENGTH_FACTOR,HOMOCHIRAL_BREAK_FACTOR_LEFT,\n",
        "            HOMOCHIRAL_BREAK_FACTOR_RIGHT,\n",
        "            HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_LEFT,\n",
        "            HOMOCHIRAL_NEIGHBOR_IMPROV_FACTOR_RIGHT]\n",
        "\n",
        "  ypos = np.arange(len(parameters))\n",
        "\n",
        "  ax.barh(ypos, values, align='center')\n",
        "  ax.set_yticks(ypos)\n",
        "  ax.set_yticklabels(parameters)\n",
        "  ax.invert_yaxis()  # labels read top-to-bottom\n",
        "  ax.set_xlabel('Value')\n",
        "  ax.set_title(f\"{stamp}Parameter values\")\n",
        "\n",
        "\n",
        "\n",
        "def plot_signed_ee_spread(self,cmap='bone',stamp=\"\"):\n",
        "  #First make the polymerspread thingy\n",
        "  poly_ee_hist = []\n",
        "  for iteration in self.get_history():\n",
        "    polys = [log for log in iteration if not isinstance(log,bool)]\n",
        "    polydata = [log for log in polys if len(log) > 1] # All the polymers (not monomers) in the iteration\n",
        "    poly_ees = [self.hist_get_polymer_ee(poly) for poly in polydata] # the EE of each polymer in the iteration\n",
        "    poly_ee_hist.append(poly_ees) # Put the EE list in our plottable structure\n",
        "  #Now we can make the plot\n",
        "  fig,ax = plt.subplots()\n",
        "  ys = []\n",
        "  xs = []\n",
        "  for n in range(len(poly_ee_hist)):\n",
        "    y = poly_ee_hist[n]\n",
        "    x = [n] * len(y)\n",
        "    ys.extend(y)\n",
        "    xs.extend(x)\n",
        "  ax.hexbin(xs,ys,cmap=cmap)\n",
        "  ax.set_title(f\"{stamp}polymer spread\")\n",
        "  ax.set_xlabel(\"iteraions\")\n",
        "  ax.set_ylabel(\"ee\")\n",
        "\n",
        "def plot_ee_heatmap(self,cmap='bone',stamp=\"\"):\n",
        "  #Need to figure out how to get ees_by_length from history\n",
        "  ees_by_length = []\n",
        "  for iteration in self.get_history():\n",
        "    ee_data = []\n",
        "    #get the polymers\n",
        "    polys = [log for log in iteration if not isinstance(log,bool)]\n",
        "    #get the length of the longest polymer\n",
        "    lengths = [len(log) for log in polys]\n",
        "    try:\n",
        "      biggest = max(lengths)\n",
        "    except:\n",
        "      biggest = 0\n",
        "    for n in range(1,biggest+1):\n",
        "      ees = [abs(self.hist_get_polymer_ee(log)) for log in polys if len(log) == n]\n",
        "      if len(ees) > 0:\n",
        "        ee_data.append(np.mean(ees))\n",
        "      else:\n",
        "        ee_data.append(0)\n",
        "    ees_by_length.append(ee_data)\n",
        "  #Need to make a new ee array with rectangular dimensions\n",
        "  ee = numpy_fillna(ees_by_length)\n",
        "  fig,ax = plt.subplots(dpi=150)\n",
        "  im = ax.imshow(ee,cmap=cmap)\n",
        "  ax.set_title(f\"{stamp}ee of polymers by length through iterations\")\n",
        "  ax.set_xlabel(\"polymer lengths\")\n",
        "  ax.set_ylabel(\"iterations\")\n",
        "  fig.tight_layout()\n",
        "  plt.show()\n",
        "\n",
        "def plot_leftrighthomochirality(self):\n",
        "  \"\"\"\n",
        "  Plot the percent of bonds that are left homochiral and right homochiral in each iteration\n",
        "  \"\"\"\n",
        " #make list to hold the number of left bonds\n",
        "  L=[]\n",
        " #make list to hold the number of right bonds\n",
        "  R=[]\n",
        " #make list to hold the number of iteration\n",
        "  x=[]\n",
        " #integer to keep track of iterations\n",
        "  i=1\n",
        "\n",
        " #work through history of reactables bag\n",
        "  for iteration in self.get_history():\n",
        "\n",
        "    #get the left right homochiral count in the iteration(returned as a tuple)\n",
        "    leftrightcount=self.hist_get_leftright_homochiral_count_iteration(iteration)\n",
        "\n",
        "    #initiate bonds as 0 to keep track of total number of bonds in the iteration\n",
        "    bonds = 0\n",
        "\n",
        "    #work through the polymers in iteration\n",
        "    for polymer in self.hist_get_polymers(iteration):\n",
        "      #add all the bonds in the a polymer to the total number of bonds\n",
        "      bonds += len(polymer)- 1\n",
        "\n",
        "    #to avoid a divide by zero error\n",
        "    if bonds == 0:\n",
        "      #just append 0 to L and R\n",
        "      L.append(0)\n",
        "      R.append(0)\n",
        "    else: # append percent left homochiral bonds and percent which are right homochiral bonds\n",
        "      L.append(leftrightcount[0]/bonds)\n",
        "      R.append(leftrightcount[1]/bonds)\n",
        "    #append the iteration to x\n",
        "    x.append(i)\n",
        "    #increment the iteration tracker\n",
        "    i+=1\n",
        "  \n",
        "  #Plot the data\n",
        "  plt.figure() \n",
        "  plt.plot(x,L,label=\"left homochiral\")\n",
        "  plt.plot(x,R,label=\"right homochiral\")\n",
        "  plt.ylabel(\"percentage of total bonds in the pool\")\n",
        "  plt.xlabel(\"Iterations\")\n",
        "  plt.title(\"Peercent of bonds in an iteration that are left or right homochiral \")\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "\n",
        "def plot_homochiral_chain_lengths(self):\n",
        "  \"\"\" Plot a chart of the mean length of homochiral chains present at each iteration.\n",
        "  The plot generated will attempt to summarize the mean lengths of homochiral\n",
        "  chains within polymers across iterations. It will also attempt to visualize the \n",
        "  varience with continuous lines plotting the standard deviation around that mean.\n",
        "  \n",
        "  The x axis of the resulting plot is iterations, and the y axis is length of \n",
        "  the homochiral chains. Both of these are discrete categories, but the plot will\n",
        "  treat iterations as continuous to improve readability for large n.\n",
        "  \"\"\"\n",
        "  # Get the history and read it \n",
        "  history = self.get_history()\n",
        "  means = []\n",
        "  stdevs= []\n",
        "  maxes = []\n",
        "  for iteration in history:\n",
        "    # Get the chain lengths in that iteration\n",
        "    iter_data = self.hist_get_iteration_chain_lengths(iteration)\n",
        "    if iter_data == []:\n",
        "      means.append(0)\n",
        "      stdevs.append(0)\n",
        "      maxes.append(0)\n",
        "      print(\"this happened in this iteration???whyyyyyyyyyyyyy\")\n",
        "      print (iteration)\n",
        "      print (iter_data)\n",
        "    else:\n",
        "      means.append(np.mean(iter_data))\n",
        "      stdevs.append(np.std(iter_data))\n",
        "      maxes.append(max(iter_data))\n",
        "  # Plot those data\n",
        "  fig,ax = plt.subplots()\n",
        "  ax.fill_between(np.arange(0,len(means)), [m + s for m, s in zip(means, stdevs)],[m - s for m, s in zip(means, stdevs)], alpha=0.2, label = \"Means +- one standard deviation\")\n",
        "  ax.plot(means, 'k-', label = \"Mean homochiral chain length\")\n",
        "  ax.plot(maxes, 'b.', label = \"Max homochiral chain length\")\n",
        "  ax.set_xlabel(\"Iteration\")\n",
        "  ax.set_ylabel(\"Homochiral chain length\")\n",
        "  ax.legend()\n",
        "\n",
        "def plot_homochirality_vs_length(self):\n",
        "  \"\"\" Take all the polymers that ever existed in history and plot them on a\n",
        "  scatter plot of length vs homochirality. Homochirality is the percent of their\n",
        "  bonds that are homochiral. \"\"\"\n",
        "  #Get the history\n",
        "  history = self.get_history()\n",
        "  #Get the polymers\n",
        "  x = []\n",
        "  y = []\n",
        "  for i in history:\n",
        "    for p in self.hist_get_polymers(i):\n",
        "      homochirality = sum(self.hist_get_polymer_homochirality_of_bonds(p))/len(p)\n",
        "      x.append(len(p))\n",
        "      y.append(homochirality)\n",
        "  fig,ax = plt.subplots()\n",
        "  ax.scatter(x,y)\n",
        "  ax.set_xlabel(\"Polymer lengths\")\n",
        "  ax.set_ylabel(\"Homochirality\")\n",
        "\n",
        "def plot_age_vs_homochirality_leftright(self):\n",
        "  \"\"\"\n",
        "  Make a plot showing the age of a polymer vs the percent of its bonds that are \n",
        "  left homochiral(shown in negative numbers) and right homochiral\n",
        "\n",
        "  \"\"\"\n",
        "  #l is a list to hold the percent of bonds that are left homochiral in a polymer\n",
        "  l=[]\n",
        "  #r is a list to hold the percent of bonds that are right homochiral in a polymer\n",
        "  r=[]\n",
        "  #x is a list that holds the ages of the polymers\n",
        "  x=[]\n",
        "\n",
        "  #go through the age history in each iteration\n",
        "  for iteration in self.get_agehistory():\n",
        "    #go through each reactable in an iteration(only polymers are present in the age history)\n",
        "    for reactable in iteration:\n",
        "      #add age to the x\n",
        "      x.append(reactable)\n",
        "  #go through the general history\n",
        "  for iteration in self.get_history():\n",
        "    #go through the reactables in the iteration\n",
        "    for reactable in iteration:\n",
        "      #only look at the polymers\n",
        "      if len(reactable) > 1:\n",
        "        #get the number of left and number of right homochiral bonds in the polymer\n",
        "        leftrightcount = self.hist_get_leftright_homochiral_count_polymer(reactable)\n",
        "        #add the left and right count as a percentage of the total number of bonds in the reactable\n",
        "        l.append((leftrightcount[0])/(len(reactable)-1))\n",
        "        r.append(-1 * (leftrightcount[1])/(len(reactable)-1))\n",
        "  #Plot the data\n",
        "  plt.figure()\n",
        "  plt.scatter(x,l, label = \"left\")\n",
        "  plt.scatter(x,r, label=\"right\")\n",
        "  plt.xlabel(\"age\")\n",
        "  plt.ylabel(\"signed percent of bonds that are homochiral\")\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "\n",
        "def plot_age_vs_homochirality_ee(self):\n",
        "  \"\"\" \n",
        "  Make a plot of the ages of a polymer vs the homochirality of the reactable. No left right sensitivity\n",
        "  \"\"\"\n",
        "  #x keeps track of the ages of the polymers\n",
        "  x=[]\n",
        "  #y keeps track of the enantiomeric excess of the polymers\n",
        "  y=[]\n",
        "  #go through iteration of age history\n",
        "  for iteration in self.get_agehistory():\n",
        "    #go through every reactable in the iteration\n",
        "    for reactable in iteration:\n",
        "      #add age to the list\n",
        "      x.append(reactable)\n",
        "  #go through the general history\n",
        "  for iteration in self.get_history():\n",
        "    #go through the reactables in the iterations\n",
        "    for reactable in iteration:\n",
        "      #only go through the polymers\n",
        "      if len(reactable) > 1:\n",
        "        #append the enantiomeric excess of the polymer\n",
        "        y.append(abs(self.hist_get_polymer_ee(reactable)))\n",
        "  #plot the data\n",
        "  plt.figure()\n",
        "  plt.scatter(x,y)\n",
        "  plt.xlabel(\"age\")\n",
        "  plt.ylabel(\"polymer_ee\")\n",
        "  plt.show()\n",
        "\n",
        "def plot_age_vs_length(self):\n",
        "  \"\"\"\n",
        "  Make a plot of the age of a reactable vs the length of the total homochiral \n",
        "  chains vs and the total nonhomochiral chains in the molecule.\n",
        "  \"\"\"\n",
        "  plt.figure()\n",
        "  z =[]\n",
        "  #x keeps track of the ages of the reactables\n",
        "  x= []\n",
        "  y =[]\n",
        "  ages = self.get_agehistory()\n",
        "  #go through the iterations of the age history\n",
        "  for iteration in self.get_agehistory():\n",
        "    #go through the reactables in the iteration\n",
        "    for reactable in iteration:\n",
        "      #add the age of the reactable to the list\n",
        "      x.append(reactable)\n",
        "\n",
        "  #go through the iterations of the general history\n",
        "  for iteration in self.get_history():\n",
        "    #go through the reactables of the iteration\n",
        "    for reactable in iteration:\n",
        "      #only go through the polymers \n",
        "      if len(reactable) > 1 :\n",
        "        #get a list of the lengths of the homochiral chain lengths in the polymer\n",
        "        homochiralchainlengths =self.hist_get_polymer_chain_lengths(reactable)\n",
        "        #go through the chain lengths \n",
        "        for n in homochiralchainlengths: \n",
        "          #Remove those that are of length one or less\n",
        "          if n < 2:\n",
        "            homochiralchainlengths.remove(n) \n",
        "        \n",
        "        number =sum(homochiralchainlengths)/(len(reactable))\n",
        "       # y.append(len(reactable) - number)\n",
        "        z.append(number) \n",
        "  plt.figure()\n",
        " # plt.scatter(x,y, label= \"of reactable\") \n",
        "  plt.scatter(x,z)\n",
        "  plt.xlabel(\"age\")\n",
        "  plt.ylabel(\"percent homochiral chain\")\n",
        "  plt.show()\n",
        "\n",
        "def plot_homochiral_lengths_vs_poisson(self):\n",
        "  \"\"\"\n",
        "  This graph visualizes the frequency of homochiral chain lengths in the history of the reactable bag.\n",
        "  It graphs the frequency of different homochiral lengths in the bag vs the poisson distribution. \n",
        "  Do factor in liklihood that these  molecules will form, the frequencies are increased by a \n",
        "  factor of thenumber of bonds they have to account for the fact that having more bonds, is less likely. \n",
        "  \"\"\"\n",
        "  #create a dictionary to track the frequency of each length of a certain homochiral bond\n",
        "  lengths = {}\n",
        "  #x is a list of the lengths to go on the x axis\n",
        "  x=[]\n",
        "  #y is a frequency to go on y axis\n",
        "  y=[]\n",
        "  #p is to store values for a length\n",
        "  p=[]\n",
        "\n",
        "  #go through the iterations of general history\n",
        "  for iteration in self.get_history():\n",
        "    #go through the reactables of the iterations\n",
        "    for reactable in iteration:\n",
        "      #go through the polymers\n",
        "      if len(reactable) >1: \n",
        "        #if so return a list  of the lenghts of the homochiral chains in the polymer\n",
        "        for n in self.hist_get_polymer_chain_lengths(reactable):\n",
        "          #only include the lengths that are greater than one\n",
        "          if n > 1:\n",
        "            #if the length is already in the dictiionary\n",
        "            if n in lengths:\n",
        "            #add one to its frequnency\n",
        "              lengths[n] += 1\n",
        "            else:#otherwise add it to the dictionay with a frequency of occurence of 1\n",
        "              lengths[n] = 1\n",
        "    #go through all of the recorded lengths\n",
        "  for n in lengths:\n",
        "    #the raise the frequency of them to a factor of the number of bonds in them, to\n",
        "    #account for the decreased liklihood of occuring as the length increases that does not\n",
        "    #have to do with homochirality\n",
        "    number = (lengths[n]/len(self.get_history()))**((n/2)-1)\n",
        "    #add the recalculated frequencied to the dictionaru\n",
        "    lengths[n] = number\n",
        "    #append the frequency to the y\n",
        "    y.append(lengths[n])\n",
        "    #append the lenght to x\n",
        "    x.append(n)\n",
        "    #plot the data\n",
        "  plt.figure()\n",
        "  #plot x and y together before sorting x\n",
        "  plt.bar(x,y, label = \"Homichiral lengths\")\n",
        "  #sort x so that it is in numerical order\n",
        "  x.sort()\n",
        "  #go through the lengths stored in x and calculate the poisson value for the length\n",
        "  #and append this to list p \n",
        "  #multiply the values by 1000 so that they appear nicely on graph with frequencies\n",
        "  for n in x:\n",
        "    p.append(1000* poissonequation(n))\n",
        "  #plot x vs p\n",
        "  plt.plot(x,p,label = \"poisson equation\", color = 'orange')\n",
        "  plt.xlabel(\"length\")\n",
        "  plt.ylabel(\"frequency\")\n",
        "  plt.title(\"Lambda =\" + str(LAMBDA))\n",
        "  plt.legend()\n",
        "  plt.show()\n",
        "\n",
        "\n",
        "        \n",
        "\n",
        "\n",
        "\n",
        "    \n",
        "\n",
        "\n",
        "  \n"
      ],
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DdqK65C-8cpi",
        "colab_type": "text"
      },
      "source": [
        "## Test program"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MelavdvZ8ptf",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "08b78323-788b-4903-ba6b-252d32b40aa6"
      },
      "source": [
        "POOL_SIZE = 100\n",
        "ITERATIONS = 100\n",
        "\n",
        "\n",
        "a = Reactables(make_pool(POOL_SIZE))\n",
        "\n",
        "print(\"Running.............|\\n\", end=\"\")\n",
        "\n",
        "monomercounts = []\n",
        "\n",
        "\n",
        "\n",
        "for n in range(ITERATIONS):\n",
        "  a.iterate(POOL_SIZE)\n",
        "  monomercounts.append(len(a.get_free_monomers())+len(a.get_bound_monomers()))\n",
        "  if n % (ITERATIONS / 10) == 0:\n",
        "    print(\"##\",end=\"\")\n",
        "\n",
        "print(\"\\nDone.\")\n",
        "\n",
        "a.parse_history()\n",
        "\n",
        "stats = a.get_stats()\n",
        "\n",
        "plots = [\"parameters\",\"polymer ee spread\",\"polyspread plotly\",\"ee heatmap\",\"leftright chirality\",\n",
        "         \"homochiral chain lengths\", \"homochirality vs length\",\"leftright Homochirality vs age\",\"Homochirality vs age\", \n",
        "         \"Homochiral chain length vs age\",\"Homochiral length frequency against poisson\"]\n",
        "tb = widgets.TabBar(plots)\n",
        "\n",
        "with tb.output_to(\"parameters\"):\n",
        "  a.visualize_parameters()\n",
        "\n",
        "with tb.output_to(\"polymer ee spread\"):\n",
        "  a.plot_signed_ee_spread()\n",
        "\n",
        "with tb.output_to(\"polyspread plotly\"):\n",
        "  df = stats\n",
        "  # HAHAHAHAHAHAHAHAHAHAHAHHAHAHHAHHAHA!!!!!\n",
        "  # I'm so good.\n",
        "  counts = df.groupby(\"Iteration\")['Signed ee'].value_counts().reset_index(name='count')\n",
        "  fig = px.scatter(counts, x=\"Iteration\", y=\"Signed ee\", size='count')\n",
        "  fig.show()\n",
        "\n",
        "with tb.output_to(\"ee heatmap\"):\n",
        "  a.plot_ee_heatmap()\n",
        "\n",
        "with tb.output_to(\"leftright chirality\"):\n",
        "  a.plot_leftrighthomochirality()\n",
        "\n",
        "with tb.output_to(\"homochiral chain lengths\"):\n",
        "  a.plot_homochiral_chain_lengths()\n",
        "\n",
        "with tb.output_to(\"homochirality vs length\"):\n",
        "  a.plot_homochirality_vs_length()\n",
        "\n",
        "with tb.output_to(\"leftright Homochirality vs age\"):\n",
        "  a.plot_age_vs_homochirality_leftright()\n",
        "\n",
        "with tb.output_to(\"Homochirality vs age\"):\n",
        "  a.plot_age_vs_homochirality_ee()\n",
        "\n",
        "with tb.output_to(\"Homochiral chain length vs age\"):\n",
        "  a.plot_age_vs_length()\n",
        "\n",
        "with tb.output_to(\"Homochiral length frequency against poisson\"):\n",
        "  a.plot_homochiral_lengths_vs_poisson()\n",
        "\n",
        "\n"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Running.............|\n",
            "####################\n",
            "Done.\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<link rel=stylesheet type=text/css href='/nbextensions/google.colab/tabbar.css'></link>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": [
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<script src='/nbextensions/google.colab/tabbar_main.min.js'></script>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": [
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<div id=\"id1\"></div>"
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": [
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ca1a0aa-bc93-11ea-a814-0242ac1c0002\"] = colab_lib.createTabBar({\"location\": \"top\", \"elementId\": \"id1\", \"tabNames\": [\"parameters\", \"polymer ee spread\", \"polyspread plotly\", \"ee heatmap\", \"leftright chirality\", \"homochiral chain lengths\", \"homochirality vs length\", \"leftright Homochirality vs age\", \"Homochirality vs age\", \"Homochiral chain length vs age\", \"Homochiral length frequency against poisson\"], \"initialSelection\": 0, \"contentBorder\": [\"0px\"], \"contentHeight\": [\"initial\"], \"borderColor\": [\"#a7a7a7\"]});\n",
              "//# sourceURL=js_0b5608e983"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ca1df52-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(0);\n",
              "//# sourceURL=js_8fe2d9459e"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ca31232-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_0a94a86f73"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_0",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ca38730-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_0\");\n",
              "//# sourceURL=js_ce3548d09e"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_0",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ca3bc78-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7ca38730-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_8cdfe12484"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_0",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ca3fbfc-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(0);\n",
              "//# sourceURL=js_79031d8bcd"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_0",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_0",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cc03556-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7ca31232-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_45f45251f6"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_0",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cc1fd50-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_bcc9b41458"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_1",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cc25106-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_1\");\n",
              "//# sourceURL=js_bec6d078e0"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_1",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cc29968-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7cc25106-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_74113a3d25"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_1",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cc2f1b0-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(1);\n",
              "//# sourceURL=js_15d7a97a18"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_1",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_1",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ce8b350-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7cc1fd50-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_be9838cc8a"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_1",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ce9b476-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_f9676a8f1b"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_2",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7ce9f242-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_2\");\n",
              "//# sourceURL=js_d73d768d16"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_2",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cea24a6-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7ce9f242-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_e4f043835a"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_2",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7cea5430-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(2);\n",
              "//# sourceURL=js_4d860d0ea3"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_2",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "<html>\n",
              "<head><meta charset=\"utf-8\" /></head>\n",
              "<body>\n",
              "    <div>\n",
              "            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>\n",
              "                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n",
              "        <script src=\"https://cdn.plot.ly/plotly-latest.min.js\"></script>    \n",
              "            <div id=\"d8e0af4c-a211-4397-80fd-97946ff42244\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
              "            <script type=\"text/javascript\">\n",
              "                \n",
              "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
              "                    \n",
              "                if (document.getElementById(\"d8e0af4c-a211-4397-80fd-97946ff42244\")) {\n",
              "                    Plotly.newPlot(\n",
              "                        'd8e0af4c-a211-4397-80fd-97946ff42244',\n",
              "                        [{\"hoverlabel\": {\"namelength\": 0}, \"hovertemplate\": \"Iteration=%{x}<br>Signed ee=%{y}<br>count=%{marker.size}\", \"legendgroup\": \"\", \"marker\": {\"color\": \"#636efa\", \"size\": [5, 4, 3, 8, 4, 3, 3, 1, 6, 6, 3, 1, 1, 1, 1, 1, 11, 9, 1, 1, 1, 1, 1, 1, 1, 7, 4, 4, 3, 2, 1, 1, 1, 1, 1, 5, 5, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 9, 5, 5, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 4, 4, 2, 1, 1, 1, 1, 1, 1, 1, 8, 4, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 8, 7, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 4, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 5, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 7, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 5, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 4, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 11, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 8, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 7, 4, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 12, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 6, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 4, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 4, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 3, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 4, 4, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 3, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 5, 4, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 4, 4, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 10, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 6, 3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 3, 3, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 3, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 7, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 4, 3, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], \"sizemode\": \"area\", \"sizeref\": 0.03, \"symbol\": \"circle\"}, \"mode\": \"markers\", \"name\": \"\", \"showlegend\": false, \"type\": \"scattergl\", \"x\": [0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 3.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 7.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 11.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 12.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 13.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 14.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 15.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 16.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 17.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 18.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 19.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 20.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 21.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 22.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 23.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 24.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 25.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 26.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 27.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 28.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 29.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 30.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 31.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 32.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 33.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 34.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 35.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 36.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 37.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 38.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 39.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 40.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 41.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 42.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 43.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 44.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 45.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 46.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 47.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 48.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 49.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 50.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 51.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 52.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 53.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 54.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 55.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 56.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 57.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 58.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 59.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 60.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 61.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 62.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 63.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 65.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 66.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 67.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 68.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 69.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 70.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 71.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 72.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 73.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 74.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 75.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 76.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 77.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 78.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 79.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 81.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 82.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 83.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 84.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 85.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 86.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 87.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 88.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 89.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 91.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 92.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 93.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 94.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 95.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 97.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 98.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0, 99.0], \"xaxis\": \"x\", \"y\": [0.0, -1.0, 1.0, 0.0, -1.0, -0.3333333333333333, 0.3333333333333333, 1.0, -0.3333333333333333, 0.0, -1.0, -0.2, 0.3333333333333333, 0.5, 0.6, 1.0, 0.0, -1.0, -0.5, -0.3333333333333333, -0.2, 0.2, 0.6, 0.6666666666666666, 1.0, -1.0, -0.3333333333333333, 0.0, 0.3333333333333333, 1.0, -0.6666666666666666, -0.5, -0.2, 0.5, 0.6, -1.0, 0.0, -0.3333333333333333, 0.1111111111111111, 0.3333333333333333, -0.7142857142857143, -0.14285714285714285, 0.2, 0.42857142857142855, 0.5, 0.6, 1.0, 0.0, -1.0, 1.0, -0.3333333333333333, -0.6666666666666666, -0.5, -0.2, -0.1111111111111111, -0.09090909090909091, 0.2, 0.25, 0.6, 0.6666666666666666, 0.0, 1.0, -1.0, -0.2, -0.75, -0.3333333333333333, -0.16666666666666666, -0.14285714285714285, -0.125, 0.14285714285714285, 0.3333333333333333, 0.4, 0.42857142857142855, 0.6, 0.6666666666666666, 0.0, -1.0, 0.3333333333333333, 1.0, -0.3333333333333333, -0.4, -0.23076923076923078, -0.09090909090909091, -0.07692307692307693, -0.06666666666666667, 0.45454545454545453, 0.6, 0.0, -1.0, -0.2, 1.0, 0.14285714285714285, -0.45454545454545453, -0.2857142857142857, -0.16666666666666666, -0.14285714285714285, -0.058823529411764705, 0.2, 0.3333333333333333, -0.3333333333333333, 0.0, -1.0, 0.3333333333333333, -0.2727272727272727, -0.23076923076923078, -0.14285714285714285, -0.09090909090909091, -0.07692307692307693, 0.25, 0.45454545454545453, 0.6, 1.0, 0.0, 1.0, -1.0, -0.5, -0.3333333333333333, -0.2, -0.45454545454545453, -0.29411764705882354, -0.25, -0.08333333333333333, 0.14285714285714285, 0.2, 0.3333333333333333, 0.4, 0.3333333333333333, -1.0, -0.3333333333333333, -0.6, -0.25, 0.0, 1.0, -0.38461538461538464, -0.2727272727272727, -0.2, -0.14285714285714285, -0.12, 0.2, 0.4, 0.5, 0.0, -0.2, -0.3333333333333333, -1.0, 0.5, 0.6, -0.5, -0.45454545454545453, -0.25, -0.09090909090909091, -0.07692307692307693, 0.058823529411764705, 0.14285714285714285, 0.45454545454545453, 1.0, 0.3333333333333333, 0.0, -1.0, -0.3333333333333333, -0.42857142857142855, -0.4, -0.38461538461538464, -0.2857142857142857, -0.25, -0.23076923076923078, -0.16666666666666666, -0.14285714285714285, -0.04, 0.1111111111111111, 0.5, 0.6666666666666666, 0.0, -0.3333333333333333, -1.0, -0.5, -0.38461538461538464, -0.2857142857142857, -0.2631578947368421, -0.125, 0.1, 0.17647058823529413, 0.3333333333333333, 0.42857142857142855, 0.5, 0.5384615384615384, 1.0, 0.0, 1.0, -1.0, -0.3333333333333333, -0.38461538461538464, 0.3333333333333333, -0.42857142857142855, -0.25, -0.2222222222222222, -0.06666666666666667, -0.058823529411764705, 0.037037037037037035, 0.047619047619047616, 0.2222222222222222, 0.5, 0.0, -0.3333333333333333, -0.6, 1.0, -0.5, -0.42857142857142855, -0.29411764705882354, -0.2631578947368421, -0.14285714285714285, -0.12195121951219512, -0.1111111111111111, 0.1, 0.29411764705882354, 0.3333333333333333, 0.47368421052631576, 0.5, 0.0, -0.3333333333333333, 1.0, -1.0, 0.5, -0.6, -0.3, -0.2857142857142857, -0.14285714285714285, -0.06666666666666667, 0.1111111111111111, 0.2, 0.2631578947368421, 0.3333333333333333, 0.4, 0.0, -1.0, -0.3333333333333333, 1.0, -0.38461538461538464, -0.3, -0.23809523809523808, -0.2, -0.15789473684210525, -0.125, -0.12195121951219512, -0.02564102564102564, 0.2222222222222222, 0.3684210526315789, 0.5, 0.0, -0.3333333333333333, 1.0, -1.0, -0.5555555555555556, -0.5, -0.2857142857142857, -0.2727272727272727, -0.2, -0.14285714285714285, -0.1, -0.09523809523809523, -0.06666666666666667, 0.1111111111111111, 0.14285714285714285, 0.29411764705882354, 0.4, 0.5, 0.0, -0.3333333333333333, 1.0, -0.6, -0.21739130434782608, -0.2, -0.15789473684210525, -0.11627906976744186, -0.02564102564102564, 0.2222222222222222, 0.2727272727272727, 0.5, 0.0, 0.3333333333333333, 1.0, -1.0, -0.25, -0.6666666666666666, -0.375, -0.2, -0.14285714285714285, -0.1111111111111111, -0.09523809523809523, -0.07692307692307693, 0.02857142857142857, 0.06666666666666667, 0.17647058823529413, 0.21739130434782608, 0.0, 1.0, -0.3333333333333333, 0.3333333333333333, -1.0, -0.45454545454545453, -0.4117647058823529, -0.25, -0.21739130434782608, -0.2, -0.07317073170731707, 0.02857142857142857, 0.058823529411764705, 0.16666666666666666, 0.5, 0.0, -1.0, -0.3333333333333333, 0.42857142857142855, 1.0, -0.3684210526315789, -0.25, -0.23076923076923078, -0.1, -0.07692307692307693, -0.02702702702702703, 0.05555555555555555, 0.13043478260869565, 0.15789473684210525, 0.3333333333333333, 0.5, 0.6, 0.0, 0.3333333333333333, -1.0, 1.0, -0.35135135135135137, -0.3333333333333333, -0.29411764705882354, -0.21428571428571427, -0.12195121951219512, -0.05555555555555555, 0.02564102564102564, 0.02857142857142857, 0.16666666666666666, 0.2, 0.23076923076923078, 0.25, 0.0, 0.3333333333333333, -1.0, 1.0, 0.2, 0.42857142857142855, -0.2653061224489796, -0.2413793103448276, -0.23809523809523808, -0.14285714285714285, -0.11627906976744186, -0.05263157894736842, 0.058823529411764705, 0.18518518518518517, 0.0, -0.3333333333333333, 0.3333333333333333, 0.5, -1.0, -0.28, -0.2727272727272727, -0.25, -0.14285714285714285, -0.1044776119402985, -0.09090909090909091, -0.08108108108108109, 0.14285714285714285, 0.2, 0.23076923076923078, 0.2413793103448276, 1.0, 0.0, 0.3333333333333333, -1.0, -0.3333333333333333, 1.0, -0.23809523809523808, -0.2, -0.19540229885057472, -0.12121212121212122, -0.02127659574468085, 0.014084507042253521, 0.2, 0.25925925925925924, 0.42857142857142855, 0.5, 0.0, -0.3333333333333333, 1.0, 0.3333333333333333, -1.0, -0.2, 0.2, -0.25, -0.18181818181818182, -0.17777777777777778, -0.13846153846153847, -0.043478260869565216, 0.06666666666666667, 0.3103448275862069, 0.0, -0.3333333333333333, 0.3333333333333333, 1.0, -1.0, -0.6, -0.42857142857142855, -0.16483516483516483, -0.15151515151515152, -0.13043478260869565, 0.17647058823529413, 0.2857142857142857, 0.42857142857142855, 0.5, -1.0, -0.14285714285714285, 0.0, 0.2, 0.3333333333333333, -0.6666666666666666, -0.18181818181818182, -0.17777777777777778, -0.13432835820895522, -0.02127659574468085, -0.013333333333333334, 0.125, 0.15151515151515152, 0.42857142857142855, 0.5, 0.6, 0.6666666666666666, 0.0, 0.3333333333333333, 1.0, -1.0, -0.3333333333333333, -0.25, -0.6, -0.16483516483516483, -0.14285714285714285, -0.13043478260869565, -0.11764705882352941, -0.02631578947368421, 0.11764705882352941, 0.21739130434782608, 0.6, 0.6666666666666666, 0.0, -1.0, 0.3333333333333333, -0.5, -0.3333333333333333, 1.0, -0.42857142857142855, -0.17391304347826086, -0.13043478260869565, -0.09090909090909091, -0.08333333333333333, -0.03896103896103896, 0.0196078431372549, 0.13513513513513514, 0.14285714285714285, 0.25, 0.5, 0.6, 0.3333333333333333, -1.0, -0.2, 0.0, -0.5, -0.14285714285714285, -0.23076923076923078, -0.16666666666666666, -0.15384615384615385, -0.14893617021276595, -0.02631578947368421, -0.018867924528301886, 0.1111111111111111, 0.14285714285714285, 0.16666666666666666, 0.28, 0.5, 0.6, 0.0, -1.0, -0.3333333333333333, -0.1111111111111111, 1.0, -0.2727272727272727, -0.16666666666666666, -0.14285714285714285, -0.1368421052631579, -0.13043478260869565, -0.037037037037037035, -0.012658227848101266, 0.06666666666666667, 0.1891891891891892, 0.25, 0.3333333333333333, 0.42857142857142855, 0.6, 0.0, -0.2, 0.3333333333333333, -1.0, 0.2, -0.4, -0.3333333333333333, -0.15384615384615385, -0.14583333333333334, -0.07692307692307693, -0.06756756756756757, -0.018867924528301886, 0.09090909090909091, 0.14285714285714285, 0.2222222222222222, 0.25, 0.5, 1.0, 0.0, -1.0, -0.3333333333333333, 0.2, 0.3333333333333333, -0.2727272727272727, -0.21428571428571427, -0.15463917525773196, -0.1111111111111111, -0.0738255033557047, 0.05263157894736842, 0.08333333333333333, 0.16666666666666666, 0.5, 0.6, 0.0, -0.2, 0.5, -0.3333333333333333, 0.12, 1.0, -1.0, -0.6, -0.2727272727272727, -0.18518518518518517, -0.16666666666666666, -0.16326530612244897, -0.06918238993710692, -0.018867924528301886, 0.23529411764705882, 0.25, 0.3333333333333333, 0.0, -0.4, 0.2, 0.3333333333333333, -1.0, -0.42857142857142855, -0.3333333333333333, -0.2857142857142857, -0.2727272727272727, -0.15384615384615385, -0.15151515151515152, -0.09090909090909091, -0.075, -0.047619047619047616, -0.038461538461538464, 0.07692307692307693, 0.08333333333333333, 0.2571428571428571, 0.5, 1.0, 0.0, -0.2, -0.16666666666666666, 1.0, -1.0, -0.3333333333333333, -0.25, -0.16, -0.08074534161490683, -0.07692307692307693, 0.034482758620689655, 0.12, 0.14285714285714285, 0.2, 0.23076923076923078, 0.23529411764705882, 0.3333333333333333, 0.0, -1.0, -0.09090909090909091, 0.3333333333333333, 1.0, -0.3333333333333333, -0.23076923076923078, -0.2, -0.15151515151515152, -0.1111111111111111, -0.08670520231213873, -0.075, -0.043478260869565216, 0.07142857142857142, 0.07692307692307693, 0.16666666666666666, 0.2727272727272727, 0.5, 0.0, -1.0, -0.14285714285714285, 0.10344827586206896, 0.3333333333333333, 1.0, -0.5, -0.2857142857142857, -0.2, -0.08641975308641975, -0.0847457627118644, 0.24444444444444444, 0.0, -1.0, 1.0, -0.3333333333333333, -0.23076923076923078, -0.15384615384615385, -0.13131313131313133, -0.07865168539325842, -0.075, -0.07142857142857142, 0.07142857142857142, 0.13333333333333333, 0.14285714285714285, 0.2727272727272727, 0.5, 0.0, -1.0, 0.3333333333333333, -0.3333333333333333, 0.10344827586206896, -0.6, -0.16666666666666666, -0.14285714285714285, -0.09090909090909091, -0.08860759493670886, -0.08737864077669903, -0.0847457627118644, -0.034482758620689655, 0.041666666666666664, 0.2, 1.0, 0.0, -1.0, -0.5, 1.0, -0.3333333333333333, -0.125, -0.1111111111111111, -0.09803921568627451, -0.09090909090909091, -0.07692307692307693, 0.031578947368421054, 0.07142857142857142, 0.07692307692307693, 0.13333333333333333, 0.14285714285714285, 0.5, -1.0, 0.0, 0.3333333333333333, -0.3333333333333333, -0.5, -0.38461538461538464, -0.2, -0.17647058823529413, -0.10679611650485436, -0.08571428571428572, -0.075, -0.034482758620689655, 0.030927835051546393, 0.09090909090909091, 0.1111111111111111, 0.125, 0.16129032258064516, 0.0, -0.3333333333333333, -0.2857142857142857, -0.18181818181818182, -0.11320754716981132, -0.0967741935483871, -0.09195402298850575, -0.08641975308641975, 0.04081632653061224, 0.07692307692307693, 0.15151515151515152, 0.16666666666666666, 0.1875, 0.2, 0.3333333333333333, 0.5, 0.0, 1.0, -0.5, -0.13333333333333333, -0.3333333333333333, -0.21739130434782608, -0.08670520231213873, -0.07317073170731707, 0.04, 0.11764705882352941, 0.16129032258064516, 0.18181818181818182, 0.5, 0.6, -0.3333333333333333, 0.3333333333333333, 0.0, 0.5, -1.0, -0.5, -0.16666666666666666, -0.14285714285714285, -0.14049586776859505, -0.0967741935483871, -0.08433734939759036, -0.08139534883720931, -0.07692307692307693, 0.0297029702970297, 0.08571428571428572, 0.13333333333333333, 0.16666666666666666, 1.0, 0.0, -0.5, 1.0, -0.3333333333333333, 0.3333333333333333, -0.6666666666666666, -0.25, -0.2, -0.13114754098360656, -0.08771929824561403, -0.07317073170731707, -0.0625, 0.038461538461538464, 0.05555555555555555, 0.13043478260869565, 0.16129032258064516, 0.2, 0.5, 0.0, 1.0, -1.0, -0.2, 0.3333333333333333, -0.6, -0.3333333333333333, -0.21428571428571427, -0.12195121951219512, -0.1111111111111111, -0.0967741935483871, -0.09302325581395349, -0.08433734939759036, 0.02857142857142857, 0.037037037037037035, 0.07692307692307693, 0.08108108108108109, 0.2, 0.5, 0.0, 0.2, -0.5, -0.3333333333333333, 1.0, -1.0, -0.6666666666666666, -0.25, -0.2, -0.1724137931034483, -0.12903225806451613, -0.09302325581395349, -0.07428571428571429, -0.06666666666666667, 0.02857142857142857, 0.10526315789473684, 0.23529411764705882, 0.3333333333333333, 0.5, 0.0, -0.3333333333333333, 0.09090909090909091, 0.14285714285714285, -1.0, -0.7142857142857143, -0.2, -0.12195121951219512, -0.08045977011494253, -0.06818181818181818, -0.034482758620689655, -0.03225806451612903, 0.03773584905660377, 0.1282051282051282, 0.21212121212121213, 0.3333333333333333, 0.7142857142857143, 1.0, 0.0, -1.0, 1.0, -0.5, -0.23076923076923078, -0.22580645161290322, -0.2, -0.15789473684210525, -0.11475409836065574, -0.09090909090909091, -0.062146892655367235, 0.037037037037037035, 0.07692307692307693, 0.10526315789473684, 0.16666666666666666, 0.2, 0.25, 0.3333333333333333, 0.42857142857142855, 0.0, 1.0, -0.3333333333333333, -1.0, -0.2857142857142857, -0.2, -0.13513513513513514, -0.10569105691056911, -0.10112359550561797, -0.061452513966480445, -0.037037037037037035, 0.028037383177570093, 0.07692307692307693, 0.16666666666666666, 0.23076923076923078, 0.4, 0.5384615384615384, 0.0, -0.2, 1.0, -1.0, -0.5, -0.3333333333333333, -0.16129032258064516, -0.1282051282051282, -0.0967741935483871, -0.06741573033707865, -0.046875, 0.03773584905660377, 0.07692307692307693, 0.2, 0.2727272727272727, 0.2857142857142857, 0.3333333333333333, 0.42857142857142855, 0.5, -1.0, 0.0, 0.3333333333333333, 1.0, 0.16666666666666666, 0.6, -0.2, -0.16666666666666666, -0.14285714285714285, -0.12195121951219512, -0.104, -0.06666666666666667, -0.03937007874015748, -0.034482758620689655, 0.02857142857142857, 0.29411764705882354, 0.5384615384615384, 0.0, -1.0, 1.0, -0.5, -0.2, 0.3333333333333333, -0.3333333333333333, -0.13513513513513514, -0.12195121951219512, -0.11811023622047244, -0.06666666666666667, -0.06077348066298342, -0.046875, 0.018867924528301886, 0.1891891891891892, 0.25, 0.2727272727272727, 0.45454545454545453, 0.6, -0.3333333333333333, 1.0, -1.0, -0.2, 0.0, 0.4, -0.11904761904761904, -0.10526315789473684, -0.061224489795918366, -0.03937007874015748, -0.034482758620689655, 0.009345794392523364, 0.15789473684210525, 0.2, 0.2727272727272727, 0.3333333333333333, 1.0, 0.0, -1.0, -0.5, -0.3333333333333333, -0.2, -0.14285714285714285, -0.1282051282051282, -0.11242603550295859, -0.06666666666666667, -0.06532663316582915, -0.05426356589147287, 0.018518518518518517, 0.14285714285714285, 0.16666666666666666, 0.1891891891891892, 0.23076923076923078, 0.3684210526315789, 0.5, 0.0, 1.0, -1.0, -0.3333333333333333, 0.3333333333333333, -0.2, -0.15789473684210525, -0.10714285714285714, -0.06550218340611354, -0.06153846153846154, 0.027522935779816515, 0.06666666666666667, 0.16666666666666666, 0.2727272727272727, 0.28, 0.6, 0.0, 0.3333333333333333, 1.0, -1.0, -0.3333333333333333, -0.6, -0.2, -0.1794871794871795, -0.14285714285714285, -0.11377245508982035, -0.06956521739130435, -0.045454545454545456, 0.018518518518518517, 0.13513513513513514, 0.14285714285714285, 0.21739130434782608, 0.25, 0.4, 0.5, 0.6666666666666666, 0.7142857142857143, 1.0, 0.0, -0.5, -1.0, -0.3333333333333333, -0.25, -0.15789473684210525, -0.12790697674418605, -0.0735930735930736, -0.0064516129032258064, 0.028037383177570093, 0.19148936170212766, 0.21739130434782608, 0.2222222222222222, 0.2727272727272727, 0.3333333333333333, 0.5555555555555556, 0.6, 0.0, 0.3333333333333333, -0.3333333333333333, 0.6, 1.0, -0.6, -0.1891891891891892, -0.12280701754385964, -0.1111111111111111, -0.07758620689655173, -0.01282051282051282, 0.018518518518518517, 0.16666666666666666, 0.2413793103448276, 0.25, 0.6666666666666666, 0.0, 1.0, -1.0, 0.3333333333333333, -0.3333333333333333, -0.25, -0.15789473684210525, -0.11764705882352941, -0.07296137339055794, -0.058823529411764705, -0.006369426751592357, 0.009174311926605505, 0.14893617021276595, 0.21428571428571427, 0.21739130434782608, 0.42857142857142855, 0.5, 0.5555555555555556, 0.0, 1.0, -1.0, -0.3333333333333333, -0.125, 0.2, 0.5, -0.2, -0.1111111111111111, -0.07692307692307693, 0.02702702702702703, 0.13043478260869565, 0.25925925925925924, 0.5294117647058824, 0.6, -1.0, 0.3333333333333333, 0.0, -0.5, -0.2, -0.11961722488038277, -0.07818930041152264, -0.058823529411764705, -0.0064516129032258064, 0.03571428571428571, 0.16, 0.23076923076923078, 0.2857142857142857, 0.42857142857142855, 0.4444444444444444, 0.7142857142857143, 0.0, -0.3333333333333333, 1.0, -1.0, -0.5, -0.125, -0.07377049180327869, 0.04504504504504504, 0.13725490196078433, 0.2413793103448276, 0.25, 0.26666666666666666, 0.3333333333333333, 0.4117647058823529, 0.5, 0.6666666666666666, -1.0, 0.0, 0.3333333333333333, 0.2, -0.6, -0.14285714285714285, -0.12077294685990338, -0.07755102040816327, -0.0064516129032258064, 0.03571428571428571, 0.058823529411764705, 0.16, 0.2413793103448276, 0.2857142857142857, 0.375, 0.42857142857142855, 0.6, 1.0, 0.0, -1.0, 1.0, 0.3333333333333333, 0.5, -0.5, -0.42857142857142855, -0.11538461538461539, -0.08130081300813008, -0.012987012987012988, 0.04504504504504504, 0.1111111111111111, 0.13725490196078433, 0.2, 0.25925925925925924, 0.2857142857142857, 0.29411764705882354, 0.0, 0.3333333333333333, -0.3333333333333333, 1.0, -1.0, -0.5, -0.11961722488038277, -0.09236947791164658, -0.01935483870967742, 0.05454545454545454, 0.058823529411764705, 0.13725490196078433, 0.2, 0.23076923076923078, 0.25, 0.4, 0.6, -1.0, 0.0, 1.0, 0.2, -0.5, -0.42857142857142855, -0.3333333333333333, -0.2, -0.11538461538461539, -0.08870967741935484, -0.012987012987012988, 0.045871559633027525, 0.09090909090909091, 0.14814814814814814, 0.17647058823529413, 0.2727272727272727, 0.29411764705882354, 0.3103448275862069, 0.3333333333333333, 0.5, -0.3333333333333333, 0.0, 1.0, -1.0, 0.16666666666666666, -0.6666666666666666, -0.25, -0.1050228310502283, -0.08433734939759036, -0.0064516129032258064, 0.043478260869565216, 0.05555555555555555, 0.12727272727272726, 0.15789473684210525, 0.18181818181818182, 0.25, 0.2857142857142857, 0.3333333333333333, 0.6, 0.0, -1.0, 1.0, -0.3333333333333333, 0.2, 0.3333333333333333, -0.7142857142857143, -0.09401709401709402, -0.01282051282051282, 0.06422018348623854, 0.08333333333333333, 0.14285714285714285, 0.14814814814814814, 0.21739130434782608, 0.23809523809523808, 0.25925925925925924, 0.2727272727272727, 0.6, 0.0, 1.0, -1.0, -0.45454545454545453, -0.3333333333333333, -0.2, -0.09168443496801706, -0.006369426751592357, 0.09090909090909091, 0.09202453987730061, 0.18181818181818182, 0.2, 0.25, 0.30434782608695654, 0.3103448275862069, 0.3333333333333333, 0.5, 0.6666666666666666, -1.0, 1.0, 0.3333333333333333, 0.6, -0.5, -0.09168443496801706, -0.037037037037037035, -0.01282051282051282, 0.0, 0.09202453987730061, 0.13043478260869565, 0.14285714285714285, 0.2413793103448276, 0.2857142857142857, 0.5, 1.0, -1.0, 0.0, -0.3333333333333333, -0.1794871794871795, -0.08438818565400844, -0.02531645569620253, 0.047619047619047616, 0.09090909090909091, 0.0975609756097561, 0.1, 0.16129032258064516, 0.3103448275862069, 0.3333333333333333, 0.5, 0.6666666666666666, 0.0, -1.0, -0.3333333333333333, 0.3333333333333333, 0.6, 1.0, -0.15789473684210525, -0.03761755485893417, -0.01910828025477707, 0.09090909090909091, 0.13043478260869565, 0.18181818181818182, 0.2, 0.5, 0.0, -1.0, 1.0, -0.1891891891891892, -0.03761755485893417, -0.025, 0.08333333333333333, 0.09090909090909091, 0.16129032258064516, 0.2, 0.25925925925925924, 0.2903225806451613, 0.3333333333333333, 0.4, 0.5555555555555556, -1.0, 0.0, -0.3333333333333333, -0.21052631578947367, -0.03761755485893417, -0.018867924528301886, 0.08333333333333333, 0.12, 0.2, 0.21428571428571427, 0.25, 0.2727272727272727, 0.3333333333333333, 0.45454545454545453, 0.5, 1.0, 0.0, 1.0, -1.0, -0.3333333333333333, -0.6, -0.2, -0.1891891891891892, -0.03912363067292645, -0.012658227848101266, 0.043478260869565216, 0.07692307692307693, 0.1724137931034483, 0.25925925925925924, 0.2727272727272727, 0.3333333333333333, 0.4, 0.5, 0.0, -1.0, 1.0, -0.5, -0.3333333333333333, 0.3333333333333333, 0.45454545454545453, 0.5, -0.2, -0.19047619047619047, -0.03912363067292645, -0.006211180124223602, 0.09090909090909091, 0.1111111111111111, 0.21428571428571427, 0.2413793103448276, 0.25, 0.0, -0.3333333333333333, 0.2, 0.3333333333333333, -1.0, -0.6, -0.5, -0.20930232558139536, -0.040498442367601244, -0.006134969325153374, 0.15384615384615385, 0.1724137931034483, 0.17647058823529413, 0.2903225806451613, 0.45454545454545453, 0.5, 0.6, 1.0, 0.0, -1.0, 0.3333333333333333, 0.5, -0.2, -0.6, -0.3333333333333333, -0.040498442367601244, 0.125, 0.13333333333333333, 0.15384615384615385, 0.2, 0.3125, 0.391304347826087, 0.0, -1.0, -0.3333333333333333, 0.2, -0.6666666666666666, -0.5, -0.2, -0.16666666666666666, -0.038880248833592534, 0.05102040816326531, 0.0967741935483871, 0.16129032258064516, 0.17647058823529413, 0.25, 0.4166666666666667, 0.5, 0.6, 0.0, -0.2, -0.3333333333333333, 0.3333333333333333, 1.0, -1.0, -0.6666666666666666, -0.5, -0.42857142857142855, -0.04775687409551375, 0.05583756345177665, 0.0625, 0.14285714285714285, 0.1875, 0.21428571428571427, 0.391304347826087, 0.0, -1.0, -0.3333333333333333, -0.6, -0.42857142857142855, -0.07692307692307693, -0.049132947976878616, 0.030303030303030304, 0.050505050505050504, 0.14285714285714285, 0.16129032258064516, 0.19298245614035087, 0.25, 0.3076923076923077, 0.3333333333333333, 0.5, 1.0, 0.0, 1.0, -0.5, 0.3333333333333333, -1.0, -0.2, -0.125, -0.047619047619047616, 0.05583756345177665, 0.0625, 0.125, 0.1875, 0.2, 0.3076923076923077, 0.6, 0.0, -0.3333333333333333, 0.3333333333333333, 1.0, -1.0, -0.2, -0.14285714285714285, -0.09090909090909091, -0.06666666666666667, -0.046242774566473986, 0.03225806451612903, 0.06550218340611354, 0.16923076923076924, 0.2, 0.36, 0.6666666666666666, 0.0, -0.3333333333333333, -0.2, 1.0, -1.0, -0.2857142857142857, -0.25, -0.14285714285714285, -0.047619047619047616, 0.07017543859649122, 0.1875, 0.3103448275862069, 0.4, 0.5, 0.7142857142857143, 0.0, -0.5, 1.0, 0.2, -1.0, -0.3333333333333333, -0.29411764705882354, -0.2, -0.1111111111111111, -0.06666666666666667, -0.047619047619047616, -0.02702702702702703, 0.06956521739130435, 0.07692307692307693, 0.18181818181818182, 0.3333333333333333, 0.45454545454545453, 0.75, 0.0, -1.0, 0.3333333333333333, 1.0, -0.3333333333333333, -0.6, -0.5, -0.25, -0.2222222222222222, -0.2, -0.14285714285714285, -0.04748201438848921, 0.0735930735930736, 0.16417910447761194, 0.3939393939393939, 0.4, 0.5, 0.7142857142857143, 0.0, -1.0, -0.5, -0.3333333333333333, 0.2, 1.0, -0.2, -0.047619047619047616, -0.04748201438848921, 0.034482758620689655, 0.047619047619047616, 0.06837606837606838, 0.13513513513513514, 0.2727272727272727, 0.375, 0.6666666666666666, 0.0, -1.0, -0.3333333333333333, 0.3333333333333333, 1.0, -0.5, -0.4, -0.1, -0.04597701149425287, 0.023255813953488372, 0.07296137339055794, 0.13924050632911392, 0.14285714285714285, 0.41935483870967744, 0.5, 0.7142857142857143, 0.0, 0.3333333333333333, 1.0, -1.0, 0.14285714285714285, 0.2, -0.6363636363636364, -0.45454545454545453, -0.04871060171919771, -0.047619047619047616, 0.03225806451612903, 0.047619047619047616, 0.07296137339055794, 0.1282051282051282, 0.3684210526315789, 0.38461538461538464, 0.4, 0.0, 0.2, -0.3333333333333333, 1.0, -1.0, -0.6666666666666666, -0.5, -0.04871060171919771, -0.043478260869565216, 0.024390243902439025, 0.07172995780590717, 0.14285714285714285, 0.16483516483516483, 0.2727272727272727, 0.40540540540540543, 0.5, 0.0, 0.3333333333333333, -1.0, -0.5, 0.38461538461538464, 1.0, -0.5384615384615384, -0.45454545454545453, -0.3333333333333333, -0.04854368932038835, -0.034482758620689655, 0.06666666666666667, 0.06779661016949153, 0.15555555555555556, 0.16666666666666666, 0.0, -0.3333333333333333, 1.0, -0.6, -0.5, -0.2, -0.04696132596685083, -0.030303030303030304, 0.024390243902439025, 0.06382978723404255, 0.13043478260869565, 0.14285714285714285, 0.3333333333333333, 0.4, 0.5, 1.0, 0.0, -0.3333333333333333, -0.2, -1.0, -0.5, -0.38461538461538464, -0.23076923076923078, -0.14285714285714285, -0.06666666666666667, -0.02696078431372549, 0.02702702702702703, 0.047619047619047616, 0.06329113924050633, 0.2, 0.3333333333333333, 0.36363636363636365, 0.38461538461538464], \"yaxis\": \"y\"}],\n",
              "                        {\"legend\": {\"itemsizing\": \"constant\", \"tracegroupgap\": 0}, \"margin\": {\"t\": 60}, \"template\": {\"data\": {\"bar\": [{\"error_x\": {\"color\": \"#2a3f5f\"}, \"error_y\": {\"color\": \"#2a3f5f\"}, \"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"bar\"}], \"barpolar\": [{\"marker\": {\"line\": {\"color\": \"#E5ECF6\", \"width\": 0.5}}, \"type\": \"barpolar\"}], \"carpet\": [{\"aaxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"baxis\": {\"endlinecolor\": \"#2a3f5f\", \"gridcolor\": \"white\", \"linecolor\": \"white\", \"minorgridcolor\": \"white\", \"startlinecolor\": \"#2a3f5f\"}, \"type\": \"carpet\"}], \"choropleth\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"choropleth\"}], \"contour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"contour\"}], \"contourcarpet\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"contourcarpet\"}], \"heatmap\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmap\"}], \"heatmapgl\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"heatmapgl\"}], \"histogram\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"histogram\"}], \"histogram2d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2d\"}], \"histogram2dcontour\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"histogram2dcontour\"}], \"mesh3d\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"type\": \"mesh3d\"}], \"parcoords\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"parcoords\"}], \"pie\": [{\"automargin\": true, \"type\": \"pie\"}], \"scatter\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter\"}], \"scatter3d\": [{\"line\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatter3d\"}], \"scattercarpet\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattercarpet\"}], \"scattergeo\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergeo\"}], \"scattergl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattergl\"}], \"scattermapbox\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scattermapbox\"}], \"scatterpolar\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolar\"}], \"scatterpolargl\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterpolargl\"}], \"scatterternary\": [{\"marker\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"type\": \"scatterternary\"}], \"surface\": [{\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}, \"colorscale\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"type\": \"surface\"}], \"table\": [{\"cells\": {\"fill\": {\"color\": \"#EBF0F8\"}, \"line\": {\"color\": \"white\"}}, \"header\": {\"fill\": {\"color\": \"#C8D4E3\"}, \"line\": {\"color\": \"white\"}}, \"type\": \"table\"}]}, \"layout\": {\"annotationdefaults\": {\"arrowcolor\": \"#2a3f5f\", \"arrowhead\": 0, \"arrowwidth\": 1}, \"coloraxis\": {\"colorbar\": {\"outlinewidth\": 0, \"ticks\": \"\"}}, \"colorscale\": {\"diverging\": [[0, \"#8e0152\"], [0.1, \"#c51b7d\"], [0.2, \"#de77ae\"], [0.3, \"#f1b6da\"], [0.4, \"#fde0ef\"], [0.5, \"#f7f7f7\"], [0.6, \"#e6f5d0\"], [0.7, \"#b8e186\"], [0.8, \"#7fbc41\"], [0.9, \"#4d9221\"], [1, \"#276419\"]], \"sequential\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]], \"sequentialminus\": [[0.0, \"#0d0887\"], [0.1111111111111111, \"#46039f\"], [0.2222222222222222, \"#7201a8\"], [0.3333333333333333, \"#9c179e\"], [0.4444444444444444, \"#bd3786\"], [0.5555555555555556, \"#d8576b\"], [0.6666666666666666, \"#ed7953\"], [0.7777777777777778, \"#fb9f3a\"], [0.8888888888888888, \"#fdca26\"], [1.0, \"#f0f921\"]]}, \"colorway\": [\"#636efa\", \"#EF553B\", \"#00cc96\", \"#ab63fa\", \"#FFA15A\", \"#19d3f3\", \"#FF6692\", \"#B6E880\", \"#FF97FF\", \"#FECB52\"], \"font\": {\"color\": \"#2a3f5f\"}, \"geo\": {\"bgcolor\": \"white\", \"lakecolor\": \"white\", \"landcolor\": \"#E5ECF6\", \"showlakes\": true, \"showland\": true, \"subunitcolor\": \"white\"}, \"hoverlabel\": {\"align\": \"left\"}, \"hovermode\": \"closest\", \"mapbox\": {\"style\": \"light\"}, \"paper_bgcolor\": \"white\", \"plot_bgcolor\": \"#E5ECF6\", \"polar\": {\"angularaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"radialaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"scene\": {\"xaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"yaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}, \"zaxis\": {\"backgroundcolor\": \"#E5ECF6\", \"gridcolor\": \"white\", \"gridwidth\": 2, \"linecolor\": \"white\", \"showbackground\": true, \"ticks\": \"\", \"zerolinecolor\": \"white\"}}, \"shapedefaults\": {\"line\": {\"color\": \"#2a3f5f\"}}, \"ternary\": {\"aaxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"baxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}, \"bgcolor\": \"#E5ECF6\", \"caxis\": {\"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\"}}, \"title\": {\"x\": 0.05}, \"xaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}, \"yaxis\": {\"automargin\": true, \"gridcolor\": \"white\", \"linecolor\": \"white\", \"ticks\": \"\", \"title\": {\"standoff\": 15}, \"zerolinecolor\": \"white\", \"zerolinewidth\": 2}}}, \"xaxis\": {\"anchor\": \"y\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Iteration\"}}, \"yaxis\": {\"anchor\": \"x\", \"domain\": [0.0, 1.0], \"title\": {\"text\": \"Signed ee\"}}},\n",
              "                        {\"responsive\": true}\n",
              "                    ).then(function(){\n",
              "                            \n",
              "var gd = document.getElementById('d8e0af4c-a211-4397-80fd-97946ff42244');\n",
              "var x = new MutationObserver(function (mutations, observer) {{\n",
              "        var display = window.getComputedStyle(gd).display;\n",
              "        if (!display || display === 'none') {{\n",
              "            console.log([gd, 'removed!']);\n",
              "            Plotly.purge(gd);\n",
              "            observer.disconnect();\n",
              "        }}\n",
              "}});\n",
              "\n",
              "// Listen for the removal of the full notebook cells\n",
              "var notebookContainer = gd.closest('#notebook-container');\n",
              "if (notebookContainer) {{\n",
              "    x.observe(notebookContainer, {childList: true});\n",
              "}}\n",
              "\n",
              "// Listen for the clearing of the current output cell\n",
              "var outputEl = gd.closest('.output');\n",
              "if (outputEl) {{\n",
              "    x.observe(outputEl, {childList: true});\n",
              "}}\n",
              "\n",
              "                        })\n",
              "                };\n",
              "                \n",
              "            </script>\n",
              "        </div>\n",
              "</body>\n",
              "</html>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_2",
              "outputarea_id1",
              "user_output"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7d906212-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7ce9b476-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_7baccdc826"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_2",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7d926544-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_81c6527e9b"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_3",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7d92bc10-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_3\");\n",
              "//# sourceURL=js_73b3557e31"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_3",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7d9303aa-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7d92bc10-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_4e7b06426d"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_3",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7d936b56-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(3);\n",
              "//# sourceURL=js_e4ecb2d3e2"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_3",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 900x600 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_3",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7dd20d2a-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7d926544-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_b822c958cc"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_3",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7dd401de-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_a0a310d6e0"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_4",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7dd4664c-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_4\");\n",
              "//# sourceURL=js_e51d3f26a3"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_4",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7dd4b87c-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7dd4664c-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_e6c878088a"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_4",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7dd4f742-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(4);\n",
              "//# sourceURL=js_12adb9c591"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_4",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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MJpWKMnwCK2a4YVjMFSGR75cxeqdmSHts2vzeB46p5ujurNmzWL9+vUsXLgQpRSjRo1i7ty5vPrqq3z77bf89NNPNGzYkPXr13P22Wdz4YUX+uxn165dzJ8/nzVr1jBq1CguvPBCPvvsM5YtW8by5cvZv38//fv35+STTwZg+fLl/PXXXzRo0IB27dpx/fXXs3DhQp5//nkmTZrEc889x2233caYMWMYM2YMb7/9Nrfffjuff/45t99+O0OGDGHGjBkUFhaSlZXFwYMHWb9+PR999BFvvPEGF198MdOnT+fKK68sM9akpCSWLl0KQFpaGjfccAMADzzwAG+99Ra33XZbRU57jcJoWqHECC2D4agxa9YsZs2aRe/evenTpw9r1qxh/fr15e5n9OjRuFwuunbtyp49ewCYP38+l112GW63myZNmjBkyBAWLVoEQP/+/WnWrBmRkZG0b9+eESNGAJCSksKWLVsA+PXXX7n88ssBuOqqq5g/fz4AP/74IzfddBMAbrebhIQEANq2bUuvXr0A6Nu3b3E/3lxyySXFn1euXMngwYNJSUlhypQprFq1qtzHXhMxmlYgfngUjmTCmU8Fr5ufC4f36c9GaBnqAE41oqpCKcV9993H3/72t0r1ExkZWarP8tR3uVzF310uFwUFBZUeg9vtLjYPehMbG1v8eezYsXz++ef07NmTd999lzlz5lRo3zUNo2kFYs8q2Pars7qZO0o+5xuhZTBUNaeffjpvv/02WVlZAOzYsYO9e8t67sbFxXHo0KFy9T148GCmTp1KYWEh+/btY+7cuQwYMMBx+0GDBvHxxx8DMGXKFAYPHgzAKaecwiuvvALoeayMjIxyjcvOoUOHaNasGfn5+UyZMqXC/dQ0jNAKRHiUcwHkMQ2C0bQMhqPAiBEjuPzyyznhhBNISUnhwgsv9CmcLr30Up566il69+7t0xHDF+eddx49evSgZ8+eDB8+nCeffJKmTZs6HtukSZN455136NGjB++//z7PP/88AM8//zw//fQTKSkp9O3b168rvhMeffRRBg4cyIknnkjnzp0r3E9NQ5yowzWdfv36qQolgZxxE2yZB/+3MnjdP6bAFzfrz+e9Bj0vLf/+DIZqzl9//UWXLl2O9TAMVYCvaysiS5RS/Y7RkHzid05LRA4Bdokm1ncBlFIqvorHduwJj4J837bl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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_4",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7df19578-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7dd401de-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_6acf1256da"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_4",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7df35fb6-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_10c3dba03e"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_5",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7df39e22-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_5\");\n",
              "//# sourceURL=js_4690ae16ff"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_5",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7df3e472-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7df39e22-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_10923ff983"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_5",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7df42036-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(5);\n",
              "//# sourceURL=js_e3f22017c6"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_5",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_5",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e1392c2-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7df35fb6-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_b4513b9173"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_5",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e15aed6-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_179da62336"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_6",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e15e72a-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_6\");\n",
              "//# sourceURL=js_a617a92bdd"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_6",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e16238e-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e15e72a-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_5a0d5ef6f7"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_6",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e16575a-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(6);\n",
              "//# sourceURL=js_65f091b0bb"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_6",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_6",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e30b7da-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e15aed6-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_6fa8e3e288"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_6",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e3232ae-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_64175d1f6c"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_7",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e32836c-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_7\");\n",
              "//# sourceURL=js_53e920d972"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_7",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e32c9d0-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e32836c-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_2107fb8c36"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_7",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e331c14-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(7);\n",
              "//# sourceURL=js_db35849c5e"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_7",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_7",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e5b00b2-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e3232ae-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_547b5bd830"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_7",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e5caff2-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_d6ff6845d3"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_8",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e5d0e02-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_8\");\n",
              "//# sourceURL=js_0d280e7982"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_8",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e5d598e-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e5d0e02-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_85a36c97ba"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_8",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e5d948a-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(8);\n",
              "//# sourceURL=js_c9555be433"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_8",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_8",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e777cec-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e5caff2-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_f369f898e0"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_8",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e794b8a-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_2081ae46c6"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e798d3e-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_9\");\n",
              "//# sourceURL=js_eee9d44d1a"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e79dd02-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e798d3e-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_a02e8e522d"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e7a17e0-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(9);\n",
              "//# sourceURL=js_e9102edd0d"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 0 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1",
              "user_output"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e964e88-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e794b8a-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_ade0f4bd62"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_9",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e989576-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.getActiveOutputArea();\n",
              "//# sourceURL=js_6f47dadb1d"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_10",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e98e792-bc93-11ea-a814-0242ac1c0002\"] = document.querySelector(\"#id1_content_10\");\n",
              "//# sourceURL=js_833ae21d27"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_10",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e992ee6-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e98e792-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_d31c6ab3c7"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_10",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7e9969ba-bc93-11ea-a814-0242ac1c0002\"] = window[\"id1\"].setSelectedTabIndex(10);\n",
              "//# sourceURL=js_4b1df7ccf6"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_10",
              "outputarea_id1"
            ]
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_10",
              "outputarea_id1",
              "user_output"
            ],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "application/javascript": [
              "window[\"7eb7f1f0-bc93-11ea-a814-0242ac1c0002\"] = google.colab.output.setActiveOutputArea(window[\"7e989576-bc93-11ea-a814-0242ac1c0002\"]);\n",
              "//# sourceURL=js_fd41e29592"
            ],
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ]
          },
          "metadata": {
            "tags": [
              "id1_content_10",
              "outputarea_id1"
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gWef4TPafFB7",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3nujicdthc10",
        "colab_type": "text"
      },
      "source": [
        "# a spot for checking code things"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0dyyujrlhrLd",
        "colab_type": "code",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "cd8bebe7-9f8f-4bdb-92d0-d735694de496"
      },
      "source": [
        "N=30\n",
        "testlengthfactor =0.6\n",
        "def lengthfactor(length):\n",
        "\n",
        " brk = (BASE_BOND_BREAK_PROBABILITY) * (testlengthfactor**(length/N))\n",
        " return brk\n",
        "x=[]\n",
        "plt.figure()\n",
        "for n in range(100):\n",
        "  x.append(n)\n",
        "y=[]\n",
        "for int in x:\n",
        "  y.append(lengthfactor(int))\n",
        "plt.plot(x,y)\n",
        "plt.show()\n",
        "\n",
        "a= Polymer()\n",
        "plt.figure()\n",
        "x=[]\n",
        "y=[]\n",
        "for n in range(30):\n",
        "  x.append(n)\n",
        "  y.append(poissonequation(n))\n",
        "plt.plot(x,y)\n",
        "plt.show()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Bz-0l0AhLPnT",
        "colab_type": "text"
      },
      "source": [
        "# Observations"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "UmLV03D1LUng",
        "colab_type": "text"
      },
      "source": [
        "Under the current refill rules, the upper bound for the total number of monomers (both free and within polymers) in the world is $1/2(P)(I)$ for $P$ = pool size and $I$ = number of iterations.\n",
        "\n",
        "The upper bound on possible polymer size is \n",
        "\n",
        "$\n",
        "\\begin{equation}\n",
        "  bound=\\left\\{\n",
        "  \\begin{array}{@{}ll@{}}\n",
        "    2^n, & n \\leq\\ T \\\\\n",
        "    2^T+(n-T)(2^{T-1}), & n>T\n",
        "  \\end{array}\\right.\n",
        "\\end{equation} \n",
        "$\n",
        "\n",
        "for $T=log_2(P)$.\n",
        "\n",
        "For $P < 100$ or so, these bounds are substantially lower than $2^n$, but for large $P$ it matters less.\n",
        "\n",
        "Also $2^T+(n-T)(2^{T-1}) = P(1+1/2(n-log_2(P))$ I think."
      ]
    }
  ]
}